'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
'
Namespace net.autocrib.www24
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="AutoCribWSSoap", [Namespace]:="https://www.autocrib.net/")>  _
    Partial Public Class AutoCribWS
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBinsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmployeesDetailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEmployeesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransactionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransactionsSAP2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGagesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDepartmentsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetJobItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMachinesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPartsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetReasonsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSuppliersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDeleteHstOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOpenPOsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIssuesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStationExtOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFirmwareOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTransactionsSAPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCompanyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SDIVendingAutoCrib.My.MySettings.Default.SDIVendingAutoCrib_net_autocrib_www24_AutoCribWS
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetUsersCompleted As GetUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBinsCompleted As GetBinsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmployeesDetailCompleted As GetEmployeesDetailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEmployeesCompleted As GetEmployeesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetItemsCompleted As GetItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransactionsCompleted As GetTransactionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransactionsSAP2Completed As GetTransactionsSAP2CompletedEventHandler
        
        '''<remarks/>
        Public Event GetGagesCompleted As GetGagesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDepartmentsCompleted As GetDepartmentsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobsCompleted As GetJobsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetJobItemsCompleted As GetJobItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMachinesCompleted As GetMachinesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPartsCompleted As GetPartsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetReasonsCompleted As GetReasonsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSuppliersCompleted As GetSuppliersCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDeleteHstCompleted As GetDeleteHstCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOpenPOsCompleted As GetOpenPOsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIssuesCompleted As GetIssuesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStationCompleted As GetStationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStationExtCompleted As GetStationExtCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFirmwareCompleted As GetFirmwareCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTransactionsSAPCompleted As GetTransactionsSAPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCompanyCompleted As GetCompanyCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetUsers", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsers(ByVal U As String, ByVal P As String, ByVal N As String, ByVal UserStart As String, ByVal UserEnd As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetUsers", New Object() {U, P, N, UserStart, UserEnd})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsersAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal UserStart As String, ByVal UserEnd As String)
            Me.GetUsersAsync(U, P, N, UserStart, UserEnd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsersAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal UserStart As String, ByVal UserEnd As String, ByVal userState As Object)
            If (Me.GetUsersOperationCompleted Is Nothing) Then
                Me.GetUsersOperationCompleted = AddressOf Me.OnGetUsersOperationCompleted
            End If
            Me.InvokeAsync("GetUsers", New Object() {U, P, N, UserStart, UserEnd}, Me.GetUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsersCompleted(Me, New GetUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetBins", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBins(ByVal U As String, ByVal P As String, ByVal N As String, ByVal StationStart As String, ByVal StationEnd As String, ByVal BinNoStart As String, ByVal BinNoEnd As String, ByVal Processed As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetBins", New Object() {U, P, N, StationStart, StationEnd, BinNoStart, BinNoEnd, Processed})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBinsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal StationStart As String, ByVal StationEnd As String, ByVal BinNoStart As String, ByVal BinNoEnd As String, ByVal Processed As String)
            Me.GetBinsAsync(U, P, N, StationStart, StationEnd, BinNoStart, BinNoEnd, Processed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBinsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal StationStart As String, ByVal StationEnd As String, ByVal BinNoStart As String, ByVal BinNoEnd As String, ByVal Processed As String, ByVal userState As Object)
            If (Me.GetBinsOperationCompleted Is Nothing) Then
                Me.GetBinsOperationCompleted = AddressOf Me.OnGetBinsOperationCompleted
            End If
            Me.InvokeAsync("GetBins", New Object() {U, P, N, StationStart, StationEnd, BinNoStart, BinNoEnd, Processed}, Me.GetBinsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBinsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBinsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBinsCompleted(Me, New GetBinsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetEmployeesDetail", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmployeesDetail(ByVal U As String, ByVal P As String, ByVal N As String, ByVal EmpNumStart As String, ByVal EmpNumEnd As String, ByVal LastNameStart As String, ByVal LastNameEnd As String, ByVal DeptStart As String, ByVal DeptEnd As String, ByVal supervisor As String, ByVal stocker As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetEmployeesDetail", New Object() {U, P, N, EmpNumStart, EmpNumEnd, LastNameStart, LastNameEnd, DeptStart, DeptEnd, supervisor, stocker})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmployeesDetailAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal EmpNumStart As String, ByVal EmpNumEnd As String, ByVal LastNameStart As String, ByVal LastNameEnd As String, ByVal DeptStart As String, ByVal DeptEnd As String, ByVal supervisor As String, ByVal stocker As String)
            Me.GetEmployeesDetailAsync(U, P, N, EmpNumStart, EmpNumEnd, LastNameStart, LastNameEnd, DeptStart, DeptEnd, supervisor, stocker, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmployeesDetailAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal EmpNumStart As String, ByVal EmpNumEnd As String, ByVal LastNameStart As String, ByVal LastNameEnd As String, ByVal DeptStart As String, ByVal DeptEnd As String, ByVal supervisor As String, ByVal stocker As String, ByVal userState As Object)
            If (Me.GetEmployeesDetailOperationCompleted Is Nothing) Then
                Me.GetEmployeesDetailOperationCompleted = AddressOf Me.OnGetEmployeesDetailOperationCompleted
            End If
            Me.InvokeAsync("GetEmployeesDetail", New Object() {U, P, N, EmpNumStart, EmpNumEnd, LastNameStart, LastNameEnd, DeptStart, DeptEnd, supervisor, stocker}, Me.GetEmployeesDetailOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmployeesDetailOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmployeesDetailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmployeesDetailCompleted(Me, New GetEmployeesDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetEmployees", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEmployees(ByVal U As String, ByVal P As String, ByVal N As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetEmployees", New Object() {U, P, N})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEmployeesAsync(ByVal U As String, ByVal P As String, ByVal N As String)
            Me.GetEmployeesAsync(U, P, N, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEmployeesAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal userState As Object)
            If (Me.GetEmployeesOperationCompleted Is Nothing) Then
                Me.GetEmployeesOperationCompleted = AddressOf Me.OnGetEmployeesOperationCompleted
            End If
            Me.InvokeAsync("GetEmployees", New Object() {U, P, N}, Me.GetEmployeesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEmployeesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEmployeesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEmployeesCompleted(Me, New GetEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetItems", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetItems(ByVal U As String, ByVal P As String, ByVal N As String, ByVal ItemCodeStart As String, ByVal ItemCodeEnd As String, ByVal Description1Start As String, ByVal Description1End As String, ByVal VendorStart As String, ByVal VendorEnd As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetItems", New Object() {U, P, N, ItemCodeStart, ItemCodeEnd, Description1Start, Description1End, VendorStart, VendorEnd})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetItemsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal ItemCodeStart As String, ByVal ItemCodeEnd As String, ByVal Description1Start As String, ByVal Description1End As String, ByVal VendorStart As String, ByVal VendorEnd As String)
            Me.GetItemsAsync(U, P, N, ItemCodeStart, ItemCodeEnd, Description1Start, Description1End, VendorStart, VendorEnd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetItemsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal ItemCodeStart As String, ByVal ItemCodeEnd As String, ByVal Description1Start As String, ByVal Description1End As String, ByVal VendorStart As String, ByVal VendorEnd As String, ByVal userState As Object)
            If (Me.GetItemsOperationCompleted Is Nothing) Then
                Me.GetItemsOperationCompleted = AddressOf Me.OnGetItemsOperationCompleted
            End If
            Me.InvokeAsync("GetItems", New Object() {U, P, N, ItemCodeStart, ItemCodeEnd, Description1Start, Description1End, VendorStart, VendorEnd}, Me.GetItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetItemsCompleted(Me, New GetItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetTransactions", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransactions( _
                    ByVal U As String,  _
                    ByVal P As String,  _
                    ByVal StartDate As String,  _
                    ByVal EndDate As String,  _
                    ByVal StartTranNo As String,  _
                    ByVal EndTranNo As String,  _
                    ByVal TranType As String,  _
                    ByVal Crib As String,  _
                    ByVal Bin As String,  _
                    ByVal Item As String,  _
                    ByVal Employee As String,  _
                    ByVal Department As String,  _
                    ByVal Job As String,  _
                    ByVal Machine As String,  _
                    ByVal Part As String,  _
                    ByVal Reason As String,  _
                    ByVal N As String,  _
                    ByVal ServerDateTime As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetTransactions", New Object() {U, P, StartDate, EndDate, StartTranNo, EndTranNo, TranType, Crib, Bin, Item, Employee, Department, Job, Machine, Part, Reason, N, ServerDateTime})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransactionsAsync( _
                    ByVal U As String,  _
                    ByVal P As String,  _
                    ByVal StartDate As String,  _
                    ByVal EndDate As String,  _
                    ByVal StartTranNo As String,  _
                    ByVal EndTranNo As String,  _
                    ByVal TranType As String,  _
                    ByVal Crib As String,  _
                    ByVal Bin As String,  _
                    ByVal Item As String,  _
                    ByVal Employee As String,  _
                    ByVal Department As String,  _
                    ByVal Job As String,  _
                    ByVal Machine As String,  _
                    ByVal Part As String,  _
                    ByVal Reason As String,  _
                    ByVal N As String,  _
                    ByVal ServerDateTime As String)
            Me.GetTransactionsAsync(U, P, StartDate, EndDate, StartTranNo, EndTranNo, TranType, Crib, Bin, Item, Employee, Department, Job, Machine, Part, Reason, N, ServerDateTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransactionsAsync( _
                    ByVal U As String,  _
                    ByVal P As String,  _
                    ByVal StartDate As String,  _
                    ByVal EndDate As String,  _
                    ByVal StartTranNo As String,  _
                    ByVal EndTranNo As String,  _
                    ByVal TranType As String,  _
                    ByVal Crib As String,  _
                    ByVal Bin As String,  _
                    ByVal Item As String,  _
                    ByVal Employee As String,  _
                    ByVal Department As String,  _
                    ByVal Job As String,  _
                    ByVal Machine As String,  _
                    ByVal Part As String,  _
                    ByVal Reason As String,  _
                    ByVal N As String,  _
                    ByVal ServerDateTime As String,  _
                    ByVal userState As Object)
            If (Me.GetTransactionsOperationCompleted Is Nothing) Then
                Me.GetTransactionsOperationCompleted = AddressOf Me.OnGetTransactionsOperationCompleted
            End If
            Me.InvokeAsync("GetTransactions", New Object() {U, P, StartDate, EndDate, StartTranNo, EndTranNo, TranType, Crib, Bin, Item, Employee, Department, Job, Machine, Part, Reason, N, ServerDateTime}, Me.GetTransactionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransactionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransactionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransactionsCompleted(Me, New GetTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetTransactionsSAP2", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransactionsSAP2( _
                    ByVal U As String,  _
                    ByVal P As String,  _
                    ByVal StartDate As String,  _
                    ByVal EndDate As String,  _
                    ByVal StartTranNo As String,  _
                    ByVal EndTranNo As String,  _
                    ByVal TranType As String,  _
                    ByVal Crib As String,  _
                    ByVal Bin As String,  _
                    ByVal Item As String,  _
                    ByVal Employee As String,  _
                    ByVal Department As String,  _
                    ByVal Job As String,  _
                    ByVal Machine As String,  _
                    ByVal Part As String,  _
                    ByVal Reason As String,  _
                    ByVal N As String,  _
                    ByVal ServerDateTime As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetTransactionsSAP2", New Object() {U, P, StartDate, EndDate, StartTranNo, EndTranNo, TranType, Crib, Bin, Item, Employee, Department, Job, Machine, Part, Reason, N, ServerDateTime})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransactionsSAP2Async( _
                    ByVal U As String,  _
                    ByVal P As String,  _
                    ByVal StartDate As String,  _
                    ByVal EndDate As String,  _
                    ByVal StartTranNo As String,  _
                    ByVal EndTranNo As String,  _
                    ByVal TranType As String,  _
                    ByVal Crib As String,  _
                    ByVal Bin As String,  _
                    ByVal Item As String,  _
                    ByVal Employee As String,  _
                    ByVal Department As String,  _
                    ByVal Job As String,  _
                    ByVal Machine As String,  _
                    ByVal Part As String,  _
                    ByVal Reason As String,  _
                    ByVal N As String,  _
                    ByVal ServerDateTime As String)
            Me.GetTransactionsSAP2Async(U, P, StartDate, EndDate, StartTranNo, EndTranNo, TranType, Crib, Bin, Item, Employee, Department, Job, Machine, Part, Reason, N, ServerDateTime, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransactionsSAP2Async( _
                    ByVal U As String,  _
                    ByVal P As String,  _
                    ByVal StartDate As String,  _
                    ByVal EndDate As String,  _
                    ByVal StartTranNo As String,  _
                    ByVal EndTranNo As String,  _
                    ByVal TranType As String,  _
                    ByVal Crib As String,  _
                    ByVal Bin As String,  _
                    ByVal Item As String,  _
                    ByVal Employee As String,  _
                    ByVal Department As String,  _
                    ByVal Job As String,  _
                    ByVal Machine As String,  _
                    ByVal Part As String,  _
                    ByVal Reason As String,  _
                    ByVal N As String,  _
                    ByVal ServerDateTime As String,  _
                    ByVal userState As Object)
            If (Me.GetTransactionsSAP2OperationCompleted Is Nothing) Then
                Me.GetTransactionsSAP2OperationCompleted = AddressOf Me.OnGetTransactionsSAP2OperationCompleted
            End If
            Me.InvokeAsync("GetTransactionsSAP2", New Object() {U, P, StartDate, EndDate, StartTranNo, EndTranNo, TranType, Crib, Bin, Item, Employee, Department, Job, Machine, Part, Reason, N, ServerDateTime}, Me.GetTransactionsSAP2OperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransactionsSAP2OperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransactionsSAP2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransactionsSAP2Completed(Me, New GetTransactionsSAP2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetGages", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGages(ByVal U As String, ByVal P As String, ByVal N As String, ByVal ItemCodeStart As String, ByVal ItemCodeEnd As String, ByVal SerialStart As String, ByVal SerialEnd As String, ByVal CalibratorStart As String, ByVal CalibratorEnd As String, ByVal GageType As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetGages", New Object() {U, P, N, ItemCodeStart, ItemCodeEnd, SerialStart, SerialEnd, CalibratorStart, CalibratorEnd, GageType})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGagesAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal ItemCodeStart As String, ByVal ItemCodeEnd As String, ByVal SerialStart As String, ByVal SerialEnd As String, ByVal CalibratorStart As String, ByVal CalibratorEnd As String, ByVal GageType As String)
            Me.GetGagesAsync(U, P, N, ItemCodeStart, ItemCodeEnd, SerialStart, SerialEnd, CalibratorStart, CalibratorEnd, GageType, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGagesAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal ItemCodeStart As String, ByVal ItemCodeEnd As String, ByVal SerialStart As String, ByVal SerialEnd As String, ByVal CalibratorStart As String, ByVal CalibratorEnd As String, ByVal GageType As String, ByVal userState As Object)
            If (Me.GetGagesOperationCompleted Is Nothing) Then
                Me.GetGagesOperationCompleted = AddressOf Me.OnGetGagesOperationCompleted
            End If
            Me.InvokeAsync("GetGages", New Object() {U, P, N, ItemCodeStart, ItemCodeEnd, SerialStart, SerialEnd, CalibratorStart, CalibratorEnd, GageType}, Me.GetGagesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGagesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGagesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGagesCompleted(Me, New GetGagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetDepartments", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDepartments(ByVal U As String, ByVal P As String, ByVal N As String, ByVal DeptNoStart As String, ByVal DeptNoEnd As String, ByVal DescriptionStart As String, ByVal DescriptionEnd As String, ByVal Active As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDepartments", New Object() {U, P, N, DeptNoStart, DeptNoEnd, DescriptionStart, DescriptionEnd, Active})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDepartmentsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal DeptNoStart As String, ByVal DeptNoEnd As String, ByVal DescriptionStart As String, ByVal DescriptionEnd As String, ByVal Active As String)
            Me.GetDepartmentsAsync(U, P, N, DeptNoStart, DeptNoEnd, DescriptionStart, DescriptionEnd, Active, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDepartmentsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal DeptNoStart As String, ByVal DeptNoEnd As String, ByVal DescriptionStart As String, ByVal DescriptionEnd As String, ByVal Active As String, ByVal userState As Object)
            If (Me.GetDepartmentsOperationCompleted Is Nothing) Then
                Me.GetDepartmentsOperationCompleted = AddressOf Me.OnGetDepartmentsOperationCompleted
            End If
            Me.InvokeAsync("GetDepartments", New Object() {U, P, N, DeptNoStart, DeptNoEnd, DescriptionStart, DescriptionEnd, Active}, Me.GetDepartmentsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDepartmentsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDepartmentsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDepartmentsCompleted(Me, New GetDepartmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetJobs", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobs(ByVal U As String, ByVal P As String, ByVal N As String, ByVal JobNoStart As String, ByVal JobNoEnd As String, ByVal DescriptionStart As String, ByVal DescripionEnd As String, ByVal Active As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetJobs", New Object() {U, P, N, JobNoStart, JobNoEnd, DescriptionStart, DescripionEnd, Active})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal JobNoStart As String, ByVal JobNoEnd As String, ByVal DescriptionStart As String, ByVal DescripionEnd As String, ByVal Active As String)
            Me.GetJobsAsync(U, P, N, JobNoStart, JobNoEnd, DescriptionStart, DescripionEnd, Active, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal JobNoStart As String, ByVal JobNoEnd As String, ByVal DescriptionStart As String, ByVal DescripionEnd As String, ByVal Active As String, ByVal userState As Object)
            If (Me.GetJobsOperationCompleted Is Nothing) Then
                Me.GetJobsOperationCompleted = AddressOf Me.OnGetJobsOperationCompleted
            End If
            Me.InvokeAsync("GetJobs", New Object() {U, P, N, JobNoStart, JobNoEnd, DescriptionStart, DescripionEnd, Active}, Me.GetJobsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobsCompleted(Me, New GetJobsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetJobItems", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobItems(ByVal U As String, ByVal P As String, ByVal N As String, ByVal JobNoStart As String, ByVal JobNoEnd As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetJobItems", New Object() {U, P, N, JobNoStart, JobNoEnd})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetJobItemsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal JobNoStart As String, ByVal JobNoEnd As String)
            Me.GetJobItemsAsync(U, P, N, JobNoStart, JobNoEnd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetJobItemsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal JobNoStart As String, ByVal JobNoEnd As String, ByVal userState As Object)
            If (Me.GetJobItemsOperationCompleted Is Nothing) Then
                Me.GetJobItemsOperationCompleted = AddressOf Me.OnGetJobItemsOperationCompleted
            End If
            Me.InvokeAsync("GetJobItems", New Object() {U, P, N, JobNoStart, JobNoEnd}, Me.GetJobItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetJobItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetJobItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetJobItemsCompleted(Me, New GetJobItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetMachines", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMachines(ByVal U As String, ByVal P As String, ByVal N As String, ByVal MachNoStart As String, ByVal MachNoEnd As String, ByVal DescriptionStart As String, ByVal DescripionEnd As String, ByVal Active As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetMachines", New Object() {U, P, N, MachNoStart, MachNoEnd, DescriptionStart, DescripionEnd, Active})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMachinesAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal MachNoStart As String, ByVal MachNoEnd As String, ByVal DescriptionStart As String, ByVal DescripionEnd As String, ByVal Active As String)
            Me.GetMachinesAsync(U, P, N, MachNoStart, MachNoEnd, DescriptionStart, DescripionEnd, Active, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMachinesAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal MachNoStart As String, ByVal MachNoEnd As String, ByVal DescriptionStart As String, ByVal DescripionEnd As String, ByVal Active As String, ByVal userState As Object)
            If (Me.GetMachinesOperationCompleted Is Nothing) Then
                Me.GetMachinesOperationCompleted = AddressOf Me.OnGetMachinesOperationCompleted
            End If
            Me.InvokeAsync("GetMachines", New Object() {U, P, N, MachNoStart, MachNoEnd, DescriptionStart, DescripionEnd, Active}, Me.GetMachinesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMachinesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMachinesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMachinesCompleted(Me, New GetMachinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetParts", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetParts(ByVal U As String, ByVal P As String, ByVal N As String, ByVal PartNoStart As String, ByVal PartNoEnd As String, ByVal DescriptionStart As String, ByVal DescripionEnd As String, ByVal Active As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetParts", New Object() {U, P, N, PartNoStart, PartNoEnd, DescriptionStart, DescripionEnd, Active})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPartsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal PartNoStart As String, ByVal PartNoEnd As String, ByVal DescriptionStart As String, ByVal DescripionEnd As String, ByVal Active As String)
            Me.GetPartsAsync(U, P, N, PartNoStart, PartNoEnd, DescriptionStart, DescripionEnd, Active, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPartsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal PartNoStart As String, ByVal PartNoEnd As String, ByVal DescriptionStart As String, ByVal DescripionEnd As String, ByVal Active As String, ByVal userState As Object)
            If (Me.GetPartsOperationCompleted Is Nothing) Then
                Me.GetPartsOperationCompleted = AddressOf Me.OnGetPartsOperationCompleted
            End If
            Me.InvokeAsync("GetParts", New Object() {U, P, N, PartNoStart, PartNoEnd, DescriptionStart, DescripionEnd, Active}, Me.GetPartsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPartsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPartsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPartsCompleted(Me, New GetPartsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetReasons", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetReasons(ByVal U As String, ByVal P As String, ByVal N As String, ByVal ReasNoStart As String, ByVal ReasNoEnd As String, ByVal DescriptionStart As String, ByVal DescripionEnd As String, ByVal Active As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetReasons", New Object() {U, P, N, ReasNoStart, ReasNoEnd, DescriptionStart, DescripionEnd, Active})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetReasonsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal ReasNoStart As String, ByVal ReasNoEnd As String, ByVal DescriptionStart As String, ByVal DescripionEnd As String, ByVal Active As String)
            Me.GetReasonsAsync(U, P, N, ReasNoStart, ReasNoEnd, DescriptionStart, DescripionEnd, Active, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetReasonsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal ReasNoStart As String, ByVal ReasNoEnd As String, ByVal DescriptionStart As String, ByVal DescripionEnd As String, ByVal Active As String, ByVal userState As Object)
            If (Me.GetReasonsOperationCompleted Is Nothing) Then
                Me.GetReasonsOperationCompleted = AddressOf Me.OnGetReasonsOperationCompleted
            End If
            Me.InvokeAsync("GetReasons", New Object() {U, P, N, ReasNoStart, ReasNoEnd, DescriptionStart, DescripionEnd, Active}, Me.GetReasonsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetReasonsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetReasonsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetReasonsCompleted(Me, New GetReasonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetSuppliers", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSuppliers(ByVal U As String, ByVal P As String, ByVal N As String, ByVal SuplierNoStart As String, ByVal SupplierNoEnd As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetSuppliers", New Object() {U, P, N, SuplierNoStart, SupplierNoEnd})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSuppliersAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal SuplierNoStart As String, ByVal SupplierNoEnd As String)
            Me.GetSuppliersAsync(U, P, N, SuplierNoStart, SupplierNoEnd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSuppliersAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal SuplierNoStart As String, ByVal SupplierNoEnd As String, ByVal userState As Object)
            If (Me.GetSuppliersOperationCompleted Is Nothing) Then
                Me.GetSuppliersOperationCompleted = AddressOf Me.OnGetSuppliersOperationCompleted
            End If
            Me.InvokeAsync("GetSuppliers", New Object() {U, P, N, SuplierNoStart, SupplierNoEnd}, Me.GetSuppliersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSuppliersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSuppliersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSuppliersCompleted(Me, New GetSuppliersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetDeleteHst", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDeleteHst(ByVal U As String, ByVal P As String, ByVal N As String, ByVal strTable As String, ByVal strKey1 As String, ByVal strKey2 As String, ByVal strKey3 As String, ByVal strProcessed As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetDeleteHst", New Object() {U, P, N, strTable, strKey1, strKey2, strKey3, strProcessed})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDeleteHstAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal strTable As String, ByVal strKey1 As String, ByVal strKey2 As String, ByVal strKey3 As String, ByVal strProcessed As String)
            Me.GetDeleteHstAsync(U, P, N, strTable, strKey1, strKey2, strKey3, strProcessed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDeleteHstAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal strTable As String, ByVal strKey1 As String, ByVal strKey2 As String, ByVal strKey3 As String, ByVal strProcessed As String, ByVal userState As Object)
            If (Me.GetDeleteHstOperationCompleted Is Nothing) Then
                Me.GetDeleteHstOperationCompleted = AddressOf Me.OnGetDeleteHstOperationCompleted
            End If
            Me.InvokeAsync("GetDeleteHst", New Object() {U, P, N, strTable, strKey1, strKey2, strKey3, strProcessed}, Me.GetDeleteHstOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDeleteHstOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDeleteHstCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDeleteHstCompleted(Me, New GetDeleteHstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetOpenPOs", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOpenPOs(ByVal U As String, ByVal P As String, ByVal N As String, ByVal Processed As String, ByVal StationEnd As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetOpenPOs", New Object() {U, P, N, Processed, StationEnd})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOpenPOsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal Processed As String, ByVal StationEnd As String)
            Me.GetOpenPOsAsync(U, P, N, Processed, StationEnd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOpenPOsAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal Processed As String, ByVal StationEnd As String, ByVal userState As Object)
            If (Me.GetOpenPOsOperationCompleted Is Nothing) Then
                Me.GetOpenPOsOperationCompleted = AddressOf Me.OnGetOpenPOsOperationCompleted
            End If
            Me.InvokeAsync("GetOpenPOs", New Object() {U, P, N, Processed, StationEnd}, Me.GetOpenPOsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOpenPOsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOpenPOsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOpenPOsCompleted(Me, New GetOpenPOsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetIssues", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIssues(ByVal U As String, ByVal P As String, ByVal N As String, ByVal Station As String, ByVal TranNo As String, ByVal MyLineNo As String, ByVal Processed As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetIssues", New Object() {U, P, N, Station, TranNo, MyLineNo, Processed})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIssuesAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal Station As String, ByVal TranNo As String, ByVal MyLineNo As String, ByVal Processed As String)
            Me.GetIssuesAsync(U, P, N, Station, TranNo, MyLineNo, Processed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIssuesAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal Station As String, ByVal TranNo As String, ByVal MyLineNo As String, ByVal Processed As String, ByVal userState As Object)
            If (Me.GetIssuesOperationCompleted Is Nothing) Then
                Me.GetIssuesOperationCompleted = AddressOf Me.OnGetIssuesOperationCompleted
            End If
            Me.InvokeAsync("GetIssues", New Object() {U, P, N, Station, TranNo, MyLineNo, Processed}, Me.GetIssuesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIssuesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIssuesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIssuesCompleted(Me, New GetIssuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetStation", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStation(ByVal U As String, ByVal P As String, ByVal N As String, ByVal Station As String, ByVal Processed As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetStation", New Object() {U, P, N, Station, Processed})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStationAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal Station As String, ByVal Processed As String)
            Me.GetStationAsync(U, P, N, Station, Processed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStationAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal Station As String, ByVal Processed As String, ByVal userState As Object)
            If (Me.GetStationOperationCompleted Is Nothing) Then
                Me.GetStationOperationCompleted = AddressOf Me.OnGetStationOperationCompleted
            End If
            Me.InvokeAsync("GetStation", New Object() {U, P, N, Station, Processed}, Me.GetStationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStationCompleted(Me, New GetStationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetStationExt", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStationExt(ByVal U As String, ByVal P As String, ByVal N As String, ByVal StationStart As String, ByVal StationEnd As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetStationExt", New Object() {U, P, N, StationStart, StationEnd})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStationExtAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal StationStart As String, ByVal StationEnd As String)
            Me.GetStationExtAsync(U, P, N, StationStart, StationEnd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStationExtAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal StationStart As String, ByVal StationEnd As String, ByVal userState As Object)
            If (Me.GetStationExtOperationCompleted Is Nothing) Then
                Me.GetStationExtOperationCompleted = AddressOf Me.OnGetStationExtOperationCompleted
            End If
            Me.InvokeAsync("GetStationExt", New Object() {U, P, N, StationStart, StationEnd}, Me.GetStationExtOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStationExtOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStationExtCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStationExtCompleted(Me, New GetStationExtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetFirmware", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFirmware(ByVal U As String, ByVal P As String, ByVal N As String, ByVal DeviceType As String, ByVal Detailed As Boolean) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetFirmware", New Object() {U, P, N, DeviceType, Detailed})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFirmwareAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal DeviceType As String, ByVal Detailed As Boolean)
            Me.GetFirmwareAsync(U, P, N, DeviceType, Detailed, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFirmwareAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal DeviceType As String, ByVal Detailed As Boolean, ByVal userState As Object)
            If (Me.GetFirmwareOperationCompleted Is Nothing) Then
                Me.GetFirmwareOperationCompleted = AddressOf Me.OnGetFirmwareOperationCompleted
            End If
            Me.InvokeAsync("GetFirmware", New Object() {U, P, N, DeviceType, Detailed}, Me.GetFirmwareOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFirmwareOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFirmwareCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFirmwareCompleted(Me, New GetFirmwareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetTransactionsSAP", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTransactionsSAP(ByVal U As String, ByVal P As String, ByVal N As String, ByVal TranNo As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetTransactionsSAP", New Object() {U, P, N, TranNo})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTransactionsSAPAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal TranNo As String)
            Me.GetTransactionsSAPAsync(U, P, N, TranNo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTransactionsSAPAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal TranNo As String, ByVal userState As Object)
            If (Me.GetTransactionsSAPOperationCompleted Is Nothing) Then
                Me.GetTransactionsSAPOperationCompleted = AddressOf Me.OnGetTransactionsSAPOperationCompleted
            End If
            Me.InvokeAsync("GetTransactionsSAP", New Object() {U, P, N, TranNo}, Me.GetTransactionsSAPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTransactionsSAPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTransactionsSAPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTransactionsSAPCompleted(Me, New GetTransactionsSAPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/GetCompany", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCompany(ByVal U As String, ByVal P As String, ByVal N As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetCompany", New Object() {U, P, N})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCompanyAsync(ByVal U As String, ByVal P As String, ByVal N As String)
            Me.GetCompanyAsync(U, P, N, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCompanyAsync(ByVal U As String, ByVal P As String, ByVal N As String, ByVal userState As Object)
            If (Me.GetCompanyOperationCompleted Is Nothing) Then
                Me.GetCompanyOperationCompleted = AddressOf Me.OnGetCompanyOperationCompleted
            End If
            Me.InvokeAsync("GetCompany", New Object() {U, P, N}, Me.GetCompanyOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCompanyOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCompanyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCompanyCompleted(Me, New GetCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetUsersCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetBinsCompletedEventHandler(ByVal sender As Object, ByVal e As GetBinsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBinsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetEmployeesDetailCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmployeesDetailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmployeesDetailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetEmployeesCompletedEventHandler(ByVal sender As Object, ByVal e As GetEmployeesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEmployeesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetTransactionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransactionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransactionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetTransactionsSAP2CompletedEventHandler(ByVal sender As Object, ByVal e As GetTransactionsSAP2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransactionsSAP2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetGagesCompletedEventHandler(ByVal sender As Object, ByVal e As GetGagesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGagesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetDepartmentsCompletedEventHandler(ByVal sender As Object, ByVal e As GetDepartmentsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDepartmentsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetJobsCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetJobItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetJobItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetJobItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetMachinesCompletedEventHandler(ByVal sender As Object, ByVal e As GetMachinesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMachinesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetPartsCompletedEventHandler(ByVal sender As Object, ByVal e As GetPartsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPartsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetReasonsCompletedEventHandler(ByVal sender As Object, ByVal e As GetReasonsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetReasonsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetSuppliersCompletedEventHandler(ByVal sender As Object, ByVal e As GetSuppliersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSuppliersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetDeleteHstCompletedEventHandler(ByVal sender As Object, ByVal e As GetDeleteHstCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDeleteHstCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetOpenPOsCompletedEventHandler(ByVal sender As Object, ByVal e As GetOpenPOsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOpenPOsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetIssuesCompletedEventHandler(ByVal sender As Object, ByVal e As GetIssuesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIssuesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetStationCompletedEventHandler(ByVal sender As Object, ByVal e As GetStationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetStationExtCompletedEventHandler(ByVal sender As Object, ByVal e As GetStationExtCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStationExtCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetFirmwareCompletedEventHandler(ByVal sender As Object, ByVal e As GetFirmwareCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFirmwareCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetTransactionsSAPCompletedEventHandler(ByVal sender As Object, ByVal e As GetTransactionsSAPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTransactionsSAPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub GetCompanyCompletedEventHandler(ByVal sender As Object, ByVal e As GetCompanyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCompanyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
End Namespace
