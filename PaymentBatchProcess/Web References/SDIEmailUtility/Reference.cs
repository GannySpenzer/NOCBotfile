//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace BanquestUtility.SDIEmailUtility {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EmailServicesSoap", Namespace="http://www.sdiexchange.com/")]
    public partial class EmailServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendSeveralEmailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmailUtilityServicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmailUtilityServicesSPCTOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EmailServices() {
            this.Url = global::BanquestUtility.Properties.Settings.Default.BanquestUtility_SDIEmailUtility_EmailServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendSeveralEmailsCompletedEventHandler SendSeveralEmailsCompleted;
        
        /// <remarks/>
        public event EmailUtilityServicesCompletedEventHandler EmailUtilityServicesCompleted;
        
        /// <remarks/>
        public event EmailUtilityServicesSPCTCompletedEventHandler EmailUtilityServicesSPCTCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sdiexchange.com/SendSeveralEmails", RequestNamespace="http://www.sdiexchange.com/", ResponseNamespace="http://www.sdiexchange.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendSeveralEmails(string[] ProcessType1, string[] FromAddress1, string[] ToAddress1, string[] MailSubject1, string[] MailCC1, string[] MAILBCC1, string[] MailBody1, string[] MailCategory1, int NumOfEmails) {
            object[] results = this.Invoke("SendSeveralEmails", new object[] {
                        ProcessType1,
                        FromAddress1,
                        ToAddress1,
                        MailSubject1,
                        MailCC1,
                        MAILBCC1,
                        MailBody1,
                        MailCategory1,
                        NumOfEmails});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSeveralEmailsAsync(string[] ProcessType1, string[] FromAddress1, string[] ToAddress1, string[] MailSubject1, string[] MailCC1, string[] MAILBCC1, string[] MailBody1, string[] MailCategory1, int NumOfEmails) {
            this.SendSeveralEmailsAsync(ProcessType1, FromAddress1, ToAddress1, MailSubject1, MailCC1, MAILBCC1, MailBody1, MailCategory1, NumOfEmails, null);
        }
        
        /// <remarks/>
        public void SendSeveralEmailsAsync(string[] ProcessType1, string[] FromAddress1, string[] ToAddress1, string[] MailSubject1, string[] MailCC1, string[] MAILBCC1, string[] MailBody1, string[] MailCategory1, int NumOfEmails, object userState) {
            if ((this.SendSeveralEmailsOperationCompleted == null)) {
                this.SendSeveralEmailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSeveralEmailsOperationCompleted);
            }
            this.InvokeAsync("SendSeveralEmails", new object[] {
                        ProcessType1,
                        FromAddress1,
                        ToAddress1,
                        MailSubject1,
                        MailCC1,
                        MAILBCC1,
                        MailBody1,
                        MailCategory1,
                        NumOfEmails}, this.SendSeveralEmailsOperationCompleted, userState);
        }
        
        private void OnSendSeveralEmailsOperationCompleted(object arg) {
            if ((this.SendSeveralEmailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSeveralEmailsCompleted(this, new SendSeveralEmailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sdiexchange.com/EmailUtilityServices", RequestNamespace="http://www.sdiexchange.com/", ResponseNamespace="http://www.sdiexchange.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EmailUtilityServices(string ProcessType, string FromAddress, string ToAddress, string MailSubject, string MailCC, string MAILBCC, string MailBody, string MailCategory, string[] AttachmentName, byte[][] Attachmentbytes) {
            object[] results = this.Invoke("EmailUtilityServices", new object[] {
                        ProcessType,
                        FromAddress,
                        ToAddress,
                        MailSubject,
                        MailCC,
                        MAILBCC,
                        MailBody,
                        MailCategory,
                        AttachmentName,
                        Attachmentbytes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EmailUtilityServicesAsync(string ProcessType, string FromAddress, string ToAddress, string MailSubject, string MailCC, string MAILBCC, string MailBody, string MailCategory, string[] AttachmentName, byte[][] Attachmentbytes) {
            this.EmailUtilityServicesAsync(ProcessType, FromAddress, ToAddress, MailSubject, MailCC, MAILBCC, MailBody, MailCategory, AttachmentName, Attachmentbytes, null);
        }
        
        /// <remarks/>
        public void EmailUtilityServicesAsync(string ProcessType, string FromAddress, string ToAddress, string MailSubject, string MailCC, string MAILBCC, string MailBody, string MailCategory, string[] AttachmentName, byte[][] Attachmentbytes, object userState) {
            if ((this.EmailUtilityServicesOperationCompleted == null)) {
                this.EmailUtilityServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmailUtilityServicesOperationCompleted);
            }
            this.InvokeAsync("EmailUtilityServices", new object[] {
                        ProcessType,
                        FromAddress,
                        ToAddress,
                        MailSubject,
                        MailCC,
                        MAILBCC,
                        MailBody,
                        MailCategory,
                        AttachmentName,
                        Attachmentbytes}, this.EmailUtilityServicesOperationCompleted, userState);
        }
        
        private void OnEmailUtilityServicesOperationCompleted(object arg) {
            if ((this.EmailUtilityServicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmailUtilityServicesCompleted(this, new EmailUtilityServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sdiexchange.com/EmailUtilityServicesSPCT", RequestNamespace="http://www.sdiexchange.com/", ResponseNamespace="http://www.sdiexchange.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EmailUtilityServicesSPCT(string ProcessType, string FromAddress, string ToAddress, string MailSubject, string MailCC, string MAILBCC, string MailBody, string MailCategory, string[] AttachmentName, byte[][] Attachmentbytes) {
            object[] results = this.Invoke("EmailUtilityServicesSPCT", new object[] {
                        ProcessType,
                        FromAddress,
                        ToAddress,
                        MailSubject,
                        MailCC,
                        MAILBCC,
                        MailBody,
                        MailCategory,
                        AttachmentName,
                        Attachmentbytes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EmailUtilityServicesSPCTAsync(string ProcessType, string FromAddress, string ToAddress, string MailSubject, string MailCC, string MAILBCC, string MailBody, string MailCategory, string[] AttachmentName, byte[][] Attachmentbytes) {
            this.EmailUtilityServicesSPCTAsync(ProcessType, FromAddress, ToAddress, MailSubject, MailCC, MAILBCC, MailBody, MailCategory, AttachmentName, Attachmentbytes, null);
        }
        
        /// <remarks/>
        public void EmailUtilityServicesSPCTAsync(string ProcessType, string FromAddress, string ToAddress, string MailSubject, string MailCC, string MAILBCC, string MailBody, string MailCategory, string[] AttachmentName, byte[][] Attachmentbytes, object userState) {
            if ((this.EmailUtilityServicesSPCTOperationCompleted == null)) {
                this.EmailUtilityServicesSPCTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmailUtilityServicesSPCTOperationCompleted);
            }
            this.InvokeAsync("EmailUtilityServicesSPCT", new object[] {
                        ProcessType,
                        FromAddress,
                        ToAddress,
                        MailSubject,
                        MailCC,
                        MAILBCC,
                        MailBody,
                        MailCategory,
                        AttachmentName,
                        Attachmentbytes}, this.EmailUtilityServicesSPCTOperationCompleted, userState);
        }
        
        private void OnEmailUtilityServicesSPCTOperationCompleted(object arg) {
            if ((this.EmailUtilityServicesSPCTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmailUtilityServicesSPCTCompleted(this, new EmailUtilityServicesSPCTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void SendSeveralEmailsCompletedEventHandler(object sender, SendSeveralEmailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSeveralEmailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSeveralEmailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void EmailUtilityServicesCompletedEventHandler(object sender, EmailUtilityServicesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmailUtilityServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmailUtilityServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    public delegate void EmailUtilityServicesSPCTCompletedEventHandler(object sender, EmailUtilityServicesSPCTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmailUtilityServicesSPCTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmailUtilityServicesSPCTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591