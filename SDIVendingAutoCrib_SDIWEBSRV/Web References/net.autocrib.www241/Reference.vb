'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
'
Namespace net.autocrib.www241
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="AutoCribWSPostSoap", [Namespace]:="https://www.autocrib.net/")>  _
    Partial Public Class AutoCribWSPost
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ProcessBinsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessDeletHstOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessDeptOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessEmpOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessErrorsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessGagesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessIssueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessJobOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessJobItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessMachineOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessMfgOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessPOOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessPartOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessReasonOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessSupplierOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessTransOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ProcessUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SDIVendingAutoCrib.My.MySettings.Default.SDIVendingAutoCrib_net_autocrib_www241_AutoCribWSPost
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ProcessBinsCompleted As ProcessBinsCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessDeletHstCompleted As ProcessDeletHstCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessDeptCompleted As ProcessDeptCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessEmpCompleted As ProcessEmpCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessErrorsCompleted As ProcessErrorsCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessGagesCompleted As ProcessGagesCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessIssueCompleted As ProcessIssueCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessItemCompleted As ProcessItemCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessJobCompleted As ProcessJobCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessJobItemsCompleted As ProcessJobItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessMachineCompleted As ProcessMachineCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessMfgCompleted As ProcessMfgCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessPOCompleted As ProcessPOCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessPartCompleted As ProcessPartCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessReasonCompleted As ProcessReasonCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessSupplierCompleted As ProcessSupplierCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessTransCompleted As ProcessTransCompletedEventHandler
        
        '''<remarks/>
        Public Event ProcessUserCompleted As ProcessUserCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessBins", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessBins(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessBins", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessBinsAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessBinsAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessBinsAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessBinsOperationCompleted Is Nothing) Then
                Me.ProcessBinsOperationCompleted = AddressOf Me.OnProcessBinsOperationCompleted
            End If
            Me.InvokeAsync("ProcessBins", New Object() {xDoc}, Me.ProcessBinsOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessBinsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessBinsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessBinsCompleted(Me, New ProcessBinsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessDeletHst", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessDeletHst(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessDeletHst", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessDeletHstAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessDeletHstAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessDeletHstAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessDeletHstOperationCompleted Is Nothing) Then
                Me.ProcessDeletHstOperationCompleted = AddressOf Me.OnProcessDeletHstOperationCompleted
            End If
            Me.InvokeAsync("ProcessDeletHst", New Object() {xDoc}, Me.ProcessDeletHstOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessDeletHstOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessDeletHstCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessDeletHstCompleted(Me, New ProcessDeletHstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessDept", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessDept(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessDept", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessDeptAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessDeptAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessDeptAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessDeptOperationCompleted Is Nothing) Then
                Me.ProcessDeptOperationCompleted = AddressOf Me.OnProcessDeptOperationCompleted
            End If
            Me.InvokeAsync("ProcessDept", New Object() {xDoc}, Me.ProcessDeptOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessDeptOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessDeptCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessDeptCompleted(Me, New ProcessDeptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessEmp", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessEmp(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessEmp", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessEmpAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessEmpAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessEmpAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessEmpOperationCompleted Is Nothing) Then
                Me.ProcessEmpOperationCompleted = AddressOf Me.OnProcessEmpOperationCompleted
            End If
            Me.InvokeAsync("ProcessEmp", New Object() {xDoc}, Me.ProcessEmpOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessEmpOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessEmpCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessEmpCompleted(Me, New ProcessEmpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessErrors", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessErrors(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessErrors", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessErrorsAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessErrorsAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessErrorsAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessErrorsOperationCompleted Is Nothing) Then
                Me.ProcessErrorsOperationCompleted = AddressOf Me.OnProcessErrorsOperationCompleted
            End If
            Me.InvokeAsync("ProcessErrors", New Object() {xDoc}, Me.ProcessErrorsOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessErrorsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessErrorsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessErrorsCompleted(Me, New ProcessErrorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessGages", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessGages(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessGages", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessGagesAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessGagesAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessGagesAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessGagesOperationCompleted Is Nothing) Then
                Me.ProcessGagesOperationCompleted = AddressOf Me.OnProcessGagesOperationCompleted
            End If
            Me.InvokeAsync("ProcessGages", New Object() {xDoc}, Me.ProcessGagesOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessGagesOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessGagesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessGagesCompleted(Me, New ProcessGagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessIssue", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessIssue(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessIssue", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessIssueAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessIssueAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessIssueAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessIssueOperationCompleted Is Nothing) Then
                Me.ProcessIssueOperationCompleted = AddressOf Me.OnProcessIssueOperationCompleted
            End If
            Me.InvokeAsync("ProcessIssue", New Object() {xDoc}, Me.ProcessIssueOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessIssueOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessIssueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessIssueCompleted(Me, New ProcessIssueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessItem", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessItem(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessItem", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessItemAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessItemAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessItemAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessItemOperationCompleted Is Nothing) Then
                Me.ProcessItemOperationCompleted = AddressOf Me.OnProcessItemOperationCompleted
            End If
            Me.InvokeAsync("ProcessItem", New Object() {xDoc}, Me.ProcessItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessItemCompleted(Me, New ProcessItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessJob", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessJob(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessJob", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessJobAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessJobAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessJobAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessJobOperationCompleted Is Nothing) Then
                Me.ProcessJobOperationCompleted = AddressOf Me.OnProcessJobOperationCompleted
            End If
            Me.InvokeAsync("ProcessJob", New Object() {xDoc}, Me.ProcessJobOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessJobOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessJobCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessJobCompleted(Me, New ProcessJobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessJobItems", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessJobItems(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessJobItems", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessJobItemsAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessJobItemsAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessJobItemsAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessJobItemsOperationCompleted Is Nothing) Then
                Me.ProcessJobItemsOperationCompleted = AddressOf Me.OnProcessJobItemsOperationCompleted
            End If
            Me.InvokeAsync("ProcessJobItems", New Object() {xDoc}, Me.ProcessJobItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessJobItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessJobItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessJobItemsCompleted(Me, New ProcessJobItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessMachine", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessMachine(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessMachine", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessMachineAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessMachineAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessMachineAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessMachineOperationCompleted Is Nothing) Then
                Me.ProcessMachineOperationCompleted = AddressOf Me.OnProcessMachineOperationCompleted
            End If
            Me.InvokeAsync("ProcessMachine", New Object() {xDoc}, Me.ProcessMachineOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessMachineOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessMachineCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessMachineCompleted(Me, New ProcessMachineCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessMfg", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessMfg(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessMfg", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessMfgAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessMfgAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessMfgAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessMfgOperationCompleted Is Nothing) Then
                Me.ProcessMfgOperationCompleted = AddressOf Me.OnProcessMfgOperationCompleted
            End If
            Me.InvokeAsync("ProcessMfg", New Object() {xDoc}, Me.ProcessMfgOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessMfgOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessMfgCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessMfgCompleted(Me, New ProcessMfgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessPO", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessPO(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessPO", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessPOAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessPOAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessPOAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessPOOperationCompleted Is Nothing) Then
                Me.ProcessPOOperationCompleted = AddressOf Me.OnProcessPOOperationCompleted
            End If
            Me.InvokeAsync("ProcessPO", New Object() {xDoc}, Me.ProcessPOOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessPOOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessPOCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessPOCompleted(Me, New ProcessPOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessPart", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessPart(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessPart", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessPartAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessPartAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessPartAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessPartOperationCompleted Is Nothing) Then
                Me.ProcessPartOperationCompleted = AddressOf Me.OnProcessPartOperationCompleted
            End If
            Me.InvokeAsync("ProcessPart", New Object() {xDoc}, Me.ProcessPartOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessPartOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessPartCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessPartCompleted(Me, New ProcessPartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessReason", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessReason(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessReason", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessReasonAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessReasonAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessReasonAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessReasonOperationCompleted Is Nothing) Then
                Me.ProcessReasonOperationCompleted = AddressOf Me.OnProcessReasonOperationCompleted
            End If
            Me.InvokeAsync("ProcessReason", New Object() {xDoc}, Me.ProcessReasonOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessReasonOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessReasonCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessReasonCompleted(Me, New ProcessReasonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessSupplier", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessSupplier(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessSupplier", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessSupplierAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessSupplierAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessSupplierAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessSupplierOperationCompleted Is Nothing) Then
                Me.ProcessSupplierOperationCompleted = AddressOf Me.OnProcessSupplierOperationCompleted
            End If
            Me.InvokeAsync("ProcessSupplier", New Object() {xDoc}, Me.ProcessSupplierOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessSupplierOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessSupplierCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessSupplierCompleted(Me, New ProcessSupplierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessTrans", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessTrans(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessTrans", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessTransAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessTransAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessTransAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessTransOperationCompleted Is Nothing) Then
                Me.ProcessTransOperationCompleted = AddressOf Me.OnProcessTransOperationCompleted
            End If
            Me.InvokeAsync("ProcessTrans", New Object() {xDoc}, Me.ProcessTransOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessTransOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessTransCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessTransCompleted(Me, New ProcessTransCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.autocrib.net/ProcessUser", RequestNamespace:="https://www.autocrib.net/", ResponseNamespace:="https://www.autocrib.net/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ProcessUser(ByVal xDoc As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ProcessUser", New Object() {xDoc})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ProcessUserAsync(ByVal xDoc As System.Xml.XmlNode)
            Me.ProcessUserAsync(xDoc, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ProcessUserAsync(ByVal xDoc As System.Xml.XmlNode, ByVal userState As Object)
            If (Me.ProcessUserOperationCompleted Is Nothing) Then
                Me.ProcessUserOperationCompleted = AddressOf Me.OnProcessUserOperationCompleted
            End If
            Me.InvokeAsync("ProcessUser", New Object() {xDoc}, Me.ProcessUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnProcessUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.ProcessUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ProcessUserCompleted(Me, New ProcessUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessBinsCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessBinsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessBinsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessDeletHstCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessDeletHstCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessDeletHstCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessDeptCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessDeptCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessDeptCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessEmpCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessEmpCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessEmpCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessErrorsCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessErrorsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessErrorsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessGagesCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessGagesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessGagesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessIssueCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessIssueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessIssueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessItemCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessJobCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessJobCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessJobCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessJobItemsCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessJobItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessJobItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessMachineCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessMachineCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessMachineCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessMfgCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessMfgCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessMfgCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessPOCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessPOCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessPOCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessPartCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessPartCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessPartCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessReasonCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessReasonCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessReasonCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessSupplierCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessSupplierCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessSupplierCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessTransCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessTransCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessTransCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")>  _
    Public Delegate Sub ProcessUserCompletedEventHandler(ByVal sender As Object, ByVal e As ProcessUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ProcessUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
End Namespace
