Imports Insiteonline.WebPartnerFunctions.WebPSharedFunc
Imports System.Drawing.Color
Imports System.Data.OleDb
Imports System.Data.SqlClient
Imports Insiteonline.ORDBData
Imports Insiteonline.SQLDBData
Imports System.Web.Mail
Imports Telerik.Web.UI
Imports System.Collections.Generic
Imports Insiteonline.clsAccessPrivileges
Imports System.Text
Imports System.Diagnostics
Imports System.Text.RegularExpressions


Public Class VendorProfile
    Inherits System.Web.UI.Page

    Private Const m_cProdDispType_CatalogSQL As String = "C" ' Catalog SQL
    Private Const m_cProdDispType_PSClient As String = "P" ' PeopleSoft Oracle 
    Private Const m_cUserGroup_Vendor As String = "SUPPLIER"
    Private Const m_cUserGroup_Mexico As String = "MEXICO"

    Private m_sAppTotalOrig As String
    Private m_sAppEmpIDOrig As String
    Private m_sAppAltOrig As String
    Private UserIdSessionvalue As String
    Private intCount As Integer
    Private Page_Action As String
    Private UserCreated As String

#Region " Web Form Designer Generated Code "

    'This call is required by the Web Form Designer.
    <System.Diagnostics.DebuggerStepThrough()> Private Sub InitializeComponent()

    End Sub
    Protected WithEvents ltlAlert As System.Web.UI.WebControls.Literal

    Dim rcbGroup As RadComboBox = New RadComboBox
    Dim rcbMultiSelect As RadComboBox = New RadComboBox
    Dim txtGroup As TextBox = New TextBox
    Dim txtGroupID As TextBox = New TextBox

    Dim valGroup As RequiredFieldValidator = New RequiredFieldValidator
    Dim rfvMultiBU As RequiredFieldValidator = New RequiredFieldValidator


    'NOTE: The following placeholder declaration is required by the Web Form Designer.
    'Do not delete or move it.
    Private designerPlaceholderDeclaration As System.Object

    Private Sub Page_Init(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Init
        'CODEGEN: This method call is required by the Web Form Designer
        'Do not modify it using the code editor.
        InitializeComponent()
    End Sub

#End Region

    Protected Overrides Sub OnPreInit(ByVal e As EventArgs)
        MyBase.OnPreInit(e)
        'MasterPageFile = "~/MasterPage/SDIXMaster.Master" 
    End Sub

    Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        Try

            Page_Action = Session("V_PageAction")

            If Page.IsPostBack = False Then
                Session("V_PageAction") = "EDIT"
                Call GetUserValues()
            End If
            
            Page_Action = Session("V_PageAction")

            Me.Title = "Profile"

            Session("SCREENNAME") = "Profile.aspx"
            If IsPostBack = False Then
                Call GetUserValues()
            End If


        Catch ex2 As Exception

        End Try

        'Code for SDI Track Starts
        Dim oSDITrack As New clsSDITrack()
        Try
            ' Don't show SDiTrack for Vendor or Mexico Vendor
            If Not IsVendor() And Not IsMexicoVendor() Then
                If oSDITrack.IsAccountSDITrack And oSDITrack.IsPrivilegeSDITrack Then

                Else
                    tbStripUserDetails.FindTabByValue("UDTL").Visible = True
                End If
            End If
        Catch ex As Exception
            lblValidation.Text = "SDiTrack Issue"
        End Try
        'Code for SDI Track Ends

        'Setting page title
        'Dim lblTitle As Label = CType(Master.FindControl("lblTitle"), Label)
        Dim strSelectedGroupValue As String = ""

        'lblTitle.Text = "Profile Update"
        RadMultiPage1.RenderSelectedPageOnly = True

        Me.lblempl.Visible = False
        Me.lblVendr.Visible = False

        Dim VendorQueryValue = Request.QueryString("VENDOR")
        Dim CustomerQueryValue = Request.QueryString("CUSTOMER")
        
        Dim SDIEmpId As String = Session("SDIEMP")
        Dim SDIUserId As String = Session("USERID")
        Dim SDIUserIdVP As String = Session("USERID_VP")

        If Session("SDIEMP") = "" Or Session("USERID") = "" Then
            Session.RemoveAll()
            Response.Redirect("default.aspx")
        End If


        'set validators to false
        turnvalidationoff()
        'Dim ddd = Session("SDIEMP")
        If Session("SDIEMP") = "CUST" Then
            MultiSiteChk.Visible = True
        End If

      
        Dim rrr = Session("UserTypeSessionValues")
        If Session("USERTYPE") = "SUPER" And Not IsVendor() And Not IsMexicoVendor() Then

        Else
            If Not IsVendor() And Not IsMexicoVendor() Then
                Me.lblVendr.Visible = False
                Me.lblempl.Visible = False
            Else
                'Me.lblVendr.Visible = True
                'Me.lblempl.Visible = True
            End If
            txtGroup.EnableViewState = True
            txtGroup.Width.Pixel(160)
            txtGroupID.EnableViewState = True
            txtGroupID.Visible = False
            PLGroup.Controls.Add(txtGroup)
            PLGroup.Controls.Add(txtGroupID)
            'lblUserType.Visible = False
            'drpUserType.Visible = False
            Label_usrtype.Visible = False
            radioUserType.Visible = False
            Label_rolefield.Visible = True
            roleDropdownList.Visible = True
            'radioUserType.SelectedIndex = 1

            txtUserid.MaxLength = 10
            Me.drpBUnit.Visible = True
            Me.lblBusUnit.Visible = True

            lblGroup.Visible = False
            MultiSiteChk.Visible = False

        End If

        UserIdSessionvalue = Session("UserIDStoredValue")

        If Me.IsPostBack Then
            txtPassword.Attributes("value") = txtPassword.Text
            txtConfirm.Attributes("value") = txtConfirm.Text
        End If
        If Page.IsPostBack Then
            m_sAppTotalOrig = Session("APPR_TOTAL")
            m_sAppEmpIDOrig = Session("APPR_APR_EMPID")
            m_sAppAltOrig = Session("APPR_APR_ALT")

            If strSelectedGroupValue <> "" Then
                If Not rcbGroup.FindItemByValue(strSelectedGroupValue) Is Nothing Then
                    rcbGroup.SelectedIndex = rcbGroup.FindItemByValue(strSelectedGroupValue).Index
                End If
            End If
        Else
            WebLog()

            If Session("PUNCHIN") = "YES" Then
                btnChangePassw.Visible = False
                If IsAscend(Session("BUSUNIT")) Then
                    'tbStripUserDetails.Tabs.FindTabByValue("OSE").Visible = True
                Else
                    'tbStripUserDetails.Tabs.FindTabByValue("OSE").Visible = False
                End If
                'btnStatEml.Visible = False
            End If

            lblAction.Text = Page_Action
            lblVendor.Text = Request.QueryString("VENDOR")
            lblMexico.Text = Request.QueryString("MEXICO")



            If Page_Action = "EDIT" Then
                TextBox_VendorId.Visible = True
                Label_VendorID.Visible = True
                TextBox_VendorId.BackColor = LightGray
                TextBox_VendorId.ReadOnly = True
                lblGroup.Visible = False
                btnChangePassw.Visible = False
                buildSelectDropDown()
                txtUserid.ReadOnly = True
                txtUserid.BackColor = LightGray
                valuserid1.Enabled = False
                valUserid2.Enabled = False
                btnAccess.Visible = False
                If Session("PUNCHIN") = "YES" Then
                    If IsAscend(Session("BUSUNIT")) Then
                        'tbStripUserDetails.Tabs.FindTabByValue("OSE").Visible = True
                    Else
                        'tbStripUserDetails.Tabs.FindTabByValue("OSE").Visible = False
                    End If
                    'btnStatEml.Visible = False
                Else
                    'tbStripUserDetails.Tabs.FindTabByValue("OSE").Visible = True
                    'btnStatEml.Visible = True
                End If
                Select Case Trim(Session("APPRTYPE"))
                    Case "O", "D", "M"
                        'btnApprovals.Visible = True
                        'tbStripUserDetails.Tabs.FindTabByValue("APP").Visible = True
                    Case Else
                        'btnApprovals.Visible = False
                        'tbStripUserDetails.Tabs.FindTabByValue("APP").Visible = False
                End Select




            ElseIf Page_Action = "ADD" Then
                TextBox_VendorId.Visible = True
                Label_VendorID.Visible = True
                TextBox_VendorId.BackColor = LightGray
                TextBox_VendorId.ReadOnly = True

                lblGroup.Visible = False
                setuppasswordfields("SETUP")
                lblSelectUser.Visible = False
                'lblSelectUser.Text = "Add Profile"
                btnEdit.Visible = False

               
                btnAccess.Visible = False
                If Session("PUNCHIN") = "YES" Then
                    If IsAscend(Session("BUSUNIT")) Then
                        'tbStripUserDetails.Tabs.FindTabByValue("OSE").Visible = True
                    Else
                        'tbStripUserDetails.Tabs.FindTabByValue("OSE").Visible = False
                    End If
                    'btnStatEml.Visible = False
                Else
                    'tbStripUserDetails.Tabs.FindTabByValue("OSE").Visible = True
                    'btnStatEml.Visible = True
                End If
                If Request.QueryString("VENDOR") = "NO" Then
                    If CustomerQueryValue = "NO" OrElse Nothing Then
                        lblSelectUser.Visible = False
                        radioUserType.SelectedIndex = 0
                    End If
                End If


                If Request.QueryString("VENDOR") = "YES" Then
                    PLGroup.Visible = False
                    lblGroup.Visible = False
                    radioUserType.SelectedIndex = 1

                    Val_txtVendorID.Visible = True
                    lblSelectUser.Visible = False
                    MultiSiteChk.Visible = False
                    txtUserid.ReadOnly = True
                    txtUserid.BackColor = LightGray
                    valuserid1.Enabled = False
                    valUserid2.Enabled = False
                Else
                    If Session("CurrentValueOfUserTypeField") <> Nothing Then
                        radioUserType.SelectedValue = Session("CurrentValueOfUserTypeField")
                    Else
                        radioUserType.SelectedIndex = 0
                    End If
                End If
                Select Case Trim(Session("APPRTYPE"))
                    Case "O", "D", "M"
                    Case Else
                End Select
            Else
                lblSelectUser.Visible = True
                'lblSelectUser.Text = "Update Profile"
                lblSelectUser.ForeColor = Black
                txtUserid.ReadOnly = True
                txtUserid.BackColor = LightGray
                valuserid1.Enabled = False
                valUserid2.Enabled = False
                lblGroup.Visible = False
                MultiSiteChk.Visible = False
                buildEditUser(Session("USERID"))
                If Session("PUNCHIN") = "YES" Then
                    If IsAscend(Session("BUSUNIT")) Then
                        'tbStripUserDetails.Tabs.FindTabByValue("OSE").Visible = True
                    Else
                        'tbStripUserDetails.Tabs.FindTabByValue("OSE").Visible = False
                    End If
                    'btnStatEml.Visible = False
                Else
                    'tbStripUserDetails.Tabs.FindTabByValue("OSE").Visible = True
                    'btnStatEml.Visible = True
                End If
            End If
            If Session("USERTYPE") = "SUPER" Then

            ElseIf Session("USERTYPE") = "ADMIN" Or _
                Session("USERTYPE") = "ADMINX" Or _
                Session("USERTYPE") = "ADMINR" Then
                Dim intGroupid As String = getGroupID(Session("USERID"))
                txtGroupID.Text = intGroupid.ToString
                txtGroup.Text = getUserGroupsName(intGroupid)
                txtGroup.ReadOnly = True
                txtGroup.BackColor = LightGray
            Else
                'tbStripUserDetails.Tabs.FindTabByValue("UPVL").Visible = False
                'tbStripUserDetails.Tabs.FindTabByValue("APP").Visible = False
                'tbStripUserDetails.FindTabByValue("TST").Visible = False
            End If
        End If


        If Session("V_USERTYPEVALUE") = "V" Then
            tr_pwd_fields.Style.Add("display", "none")
            tr_Cpwd_fields.Style.Add("display", "none")
            tr_Site_fields.Style.Add("display", "none")
            tr_MultiSiteChk_fields.Style.Add("display", "none")
            If Session("V_ROLE_Type") = "ADMIN" Then
                If Page_Action = "EDIT" Then
                    lblSelectUser.Visible = True
                    dropSelectUser.Visible = True
                    'buildSelectDropDown()
                    roleDropdownList.Enabled = True
                    lblPassword.Visible = False
                    lblConfirm.Visible = False
                    btnEdit.Visible = False
                    btnAdd.Visible = True
                    Dim vndrId As String = Session("VendorID_Data")
                    TextBox_VendorId.Text = vndrId
                ElseIf Page_Action = "ADD" Then
                    tbStripUserDetails.Tabs.FindTabByValue("UPVL").Visible = False
                    tr_pwd_fields.Style.Remove("display")
                    tr_Cpwd_fields.Style.Remove("display")
                    btnEdit.Visible = True
                    btnAdd.Visible = False
                    Dim VendrValueID As String = Session("VendorID_Data")
                    TextBox_VendorId.Text = VendrValueID
                    txtUserid.Enabled = False
                End If
            ElseIf Session("V_ROLE_Type") = "USER" Then
                tr_SelectUser_fields.Style.Add("display", "none")
                If Page_Action = "EDIT" Then
                    tbStripUserDetails.Tabs.FindTabByValue("UPVL").Visible = False
                    roleDropdownList.Enabled = False
                    lblSelectUser.Visible = False
                    dropSelectUser.Visible = False
                    lblPassword.Visible = False
                    lblConfirm.Visible = False
                    drpBUnit.Enabled = False
                End If
            End If
        End If


        ' check/auto-select logged in user amongst the list (if exist)
        '   - erwin 2009.09.22
        If Not Page.IsPostBack Then
            Dim sId As String = CStr(Session("USERID")).Trim
            If sId.Length > 0 And Me.dropSelectUser.Items.Count > 0 Then
                Me.dropSelectUser.SelectedIndex = Me.dropSelectUser.Items.IndexOf(Me.dropSelectUser.Items.FindByValue(value:=sId))
                If dropSelectUser.SelectedIndex = 0 Then
                    buildEditUser(sId)
                Else
                    buildEditUser(dropSelectUser.SelectedValue)
                End If

                If Session("PUNCHIN") = "YES" Then
                    btnChangePassw.Visible = False
                Else
                    btnChangePassw.Visible = True
                End If
            End If
        End If



    End Sub

    Private Sub btnCancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnCancel.Click
        'Response.Redirect(Session("DEFAULTPAGE").ToString())
        Dim str As String = "SDIVendor.aspx" '"CatalogTree.aspx?USERID=" + Session("USERID").ToString
        Response.Redirect(str)
    End Sub

    Private Sub btnSave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSave.Click
        lblMessage.Text = ""

        valFirst.Enabled = True
        valLast.Enabled = True
        valType.Enabled = True
        valEmail1.Enabled = True
        valEmail2.Enabled = True

        'valuserid1.Enabled = True

        valGroup.Enabled = True
        valPhone1.Enabled = True
        valPhone2.Enabled = True

        'Val_txtVendorID.Enabled = True

        If Page_Action = "ADD" Then
            valUserid2.Enabled = False
            valPassword.Enabled = True
            valConfirm.Enabled = True
            valConfirm2.Enabled = True
            SiteBUValidator.Enabled = True
        End If

        If radioUserType.SelectedValue = "C" Then
            txtUserid.ReadOnly = True
            txtUserid.BackColor = LightGray
            valuserid1.Enabled = False
            valUserid2.Enabled = False
            lblGroup.Enabled = True
        ElseIf radioUserType.SelectedValue = "V" Then
            'Val_txtVendorID.Enabled = True
        End If

        Page.Validate()
        Dim drpvalues As String = Convert.ToString(roleDropdownList.SelectedItem)



        If IsValid Then
            ProfileUpdate()
            turnvalidationoff()
        End If
        'If IsValid Then
        '    ProfileUpdate()
        '    turnvalidationoff()
        'End If
    End Sub

    Sub buildEditUser(ByVal strUserID)
        Dim strMessage As New Alert
        lblMessage.Text = ""
        Dim strSQLString As String = "SELECT ISA_USER_ID, FIRST_NAME_SRCH," & vbCrLf & _
                            " LAST_NAME_SRCH, ISA_EMPLOYEE_EMAIL," & vbCrLf & _
                            " ISA_EMPLOYEE_ID, PHONE_NUM, ISA_EMPLOYEE_ACTYP," & vbCrLf & _
                            " ISA_SDI_EMPLOYEE, BUSINESS_UNIT, active_status,Multi_Site,ISA_VENDOR_ID " & vbCrLf & _
                            " FROM SDIX_USERS_TBL" & vbCrLf & _
                            " WHERE ISA_EMPLOYEE_ID = '" & strUserID & "'" & vbCrLf
        If Not IsUserCanReinstate() Then
            ' If the logged in user cannot activate/inactivate an account, then filter out all the inactive users.
            ' If the logged in user can activate/inactivate, let them see all accounts unrestricted by active status.
            strSQLString &= " AND ACTIVE_STATUS IN ('" & clsUserTbl.ActiveStatus_Active & "','" & clsUserTbl.ActiveStatus_FailedLogin & "')" & vbCrLf
        End If

        Dim dsOREmp As DataSet = ORDBData.GetAdapter(strSQLString)

        If dsOREmp.Tables(0).Rows.Count = 0 Then
            Me.dropSelectUser.SelectedIndex = 0
            ' ltlAlert.Text = strMessage.Say("Error - User does not exist in ISA_USERS_TBL!")
            Exit Sub
        ElseIf dsOREmp.Tables(0).Rows.Count > 1 Then
            ltlAlert.Text = strMessage.Say("Error - User exist more than once in ISA_USERS_TBL table!")
            Exit Sub
        End If

        Session("UserTypeSessionValue") = dsOREmp.Tables(0).Rows(0).Item("ISA_SDI_EMPLOYEE")

        txtFirst.Text = dsOREmp.Tables(0).Rows(0).Item("FIRST_NAME_SRCH")
        txtLast.Text = dsOREmp.Tables(0).Rows(0).Item("LAST_NAME_SRCH")
        txtPhone.Text = Trim(dsOREmp.Tables(0).Rows(0).Item("PHONE_NUM"))
        txtEmail.Text = dsOREmp.Tables(0).Rows(0).Item("ISA_EMPLOYEE_EMAIL")
        txtUserid.Text = dsOREmp.Tables(0).Rows(0).Item("ISA_EMPLOYEE_ID")
        Dim VendorIDValue As String = Convert.ToString(dsOREmp.Tables(0).Rows(0).Item("ISA_VENDOR_ID"))
        If VendorIDValue <> Nothing Then
            TextBox_VendorId.Text = dsOREmp.Tables(0).Rows(0).Item("ISA_VENDOR_ID")
        Else
            TextBox_VendorId.Text = Session("USERID")
        End If
        'Session("VendorID_Data") = VendorIDValue

        lblUserIDHide.Text = dsOREmp.Tables(0).Rows(0).Item("ISA_USER_ID")
        lblActiveStatusHide.Text = dsOREmp.Tables(0).Rows(0).Item("active_status").ToString.ToUpper
        If dsOREmp.Tables(0).Rows(0).Item("MULTI_SITE").ToString() = "Y" Then
            MultiSiteChk.Checked = True
            rcbMultiSelect.Visible = True
            If MultiSiteChk.Checked Then
                If Request.QueryString("MEXICO") = "YES" Then
                    drpBUnit.Visible = False
                    lblBusUnit.Visible = False
                End If
                If dsOREmp.Tables(0).Rows(0).Item("BUSINESS_UNIT") <> "SDM00" Then
                    GetMultiBusinessUnit(dsOREmp.Tables(0).Rows(0).Item("BUSINESS_UNIT"))
                Else
                    MultiSiteChk.Checked = False
                    rcbMultiSelect.Visible = False
                End If
            Else
                drpBUnit.Visible = False
                lblBusUnit.Visible = False
                rcbMultiSelect.Visible = False

            End If
        Else
            MultiSiteChk.Checked = False
            rcbMultiSelect.Visible = False
            rcbMultiSelect.ClearCheckedItems()
        End If

        Dim strQuery As String = "Select BUSINESS_UNIT FROM SDIX_MULTI_SITE WHERE ISA_EMPLOYEE_ID='" & strUserID & "'"
        Dim dsMultiBU As DataSet = ORDBData.GetAdapter(strQuery)
        If dsMultiBU.Tables(0).Rows.Count > 0 Then
            For i As Integer = 0 To dsMultiBU.Tables(0).Rows.Count - 1
                For Each checkedItem As RadComboBoxItem In rcbMultiSelect.Items
                    If checkedItem.Value = dsMultiBU.Tables(0).Rows(i).Item("BUSINESS_UNIT") Then
                        checkedItem.Checked = True
                        If dsOREmp.Tables(0).Rows(0).Item("BUSINESS_UNIT") = checkedItem.Value Then
                            checkedItem.Enabled = False
                        End If
                    End If
                    'Do Something (insert)
                Next
            Next
        End If


        lblEmplActiveStatusHide.Text = " "
        Dim strCurrBU As String = " "
        strCurrBU = dsOREmp.Tables(0).Rows(0).Item("BUSINESS_UNIT")
        If Trim(strCurrBU) = "" Or Trim(strCurrBU) = "0" Then
            strCurrBU = Session("BUSUNIT")
        End If
        lblCurrBUHide.Text = strCurrBU
        ' check Employee table EFF_STATUS
        strSQLString = "SELECT A.EFF_STATUS from PS_ISA_EMPL_TBL A " & _
         " WHERE A.ISA_EMPLOYEE_ID = '" & strUserID & "' AND A.BUSINESS_UNIT = '" & strCurrBU & "'"
        Dim strEmplEffStatus As String = ""
        Try
            strEmplEffStatus = ORDBData.GetScalar(strSQLString, False)
            If Trim(strEmplEffStatus) = "" Then
                strEmplEffStatus = "N"
            End If
        Catch ex As Exception
            strEmplEffStatus = "N"
        End Try

        lblEmplActiveStatusHide.Text = strEmplEffStatus

        roleDropdownList.ClearSelection()
        Dim Rolevalue As String = Convert.ToString(dsOREmp.Tables(0).Rows(0).Item("ISA_EMPLOYEE_ACTYP"))
        Select Case Rolevalue
            Case "USER"
                roleDropdownList.SelectedIndex = 1
            Case "ADMIN"
                roleDropdownList.SelectedIndex = 0
            Case "SUPER"
                roleDropdownList.SelectedIndex = 0
        End Select
        
        radioUserType.ClearSelection()
        Dim UsertypeValue As String = Convert.ToString(dsOREmp.Tables(0).Rows(0).Item("ISA_SDI_EMPLOYEE"))
        radioUserType.SelectedValue = "V"

        'drpUserType.Visible = False
        Dim sBU As String = dsOREmp.Tables(0).Rows(0).Item("business_unit")
        Dim liItem As ListItem = drpBUnit.Items.FindByValue(sBU)
        If liItem IsNot Nothing Then
            drpBUnit.SelectedIndex = drpBUnit.Items.IndexOf(liItem)
        End If
        Exit Sub

        'new code for assigning the BU
        If Session("USERTYPE") = "SUPER" Then
            rcbGroup.ClearSelection()
            Dim strBU As String = dsOREmp.Tables(0).Rows(0).Item("BUSINESS_UNIT")
            If Not rcbGroup.FindItemByValue(dsOREmp.Tables(0).Rows(0).Item("BUSINESS_UNIT")) Is Nothing Then
                rcbGroup.SelectedIndex = rcbGroup.FindItemByValue(dsOREmp.Tables(0).Rows(0).Item("BUSINESS_UNIT")).Index
            End If
        Else
            txtGroup.ReadOnly = True
            txtGroup.BackColor = LightGray
            txtGroup.Text = getUserGroupsName(dsOREmp.Tables(0).Rows(0).Item("BUSINESS_UNIT"))
            txtGroupID.Text = dsOREmp.Tables(0).Rows(0).Item("BUSINESS_UNIT")
        End If

        ' First, just set these to invisible to start then figure out what should show with the logic below.
        lblAccountDisabled.Visible = False
        btnActivateAccount.Visible = False
        btnInactivateAccount.Visible = False

        btnEmplInactivateAccount.Visible = False
        btnEmplActivateAccount.Visible = False
        lblEmplAccountDisabled.Visible = False

        If IsUserCanReinstate() Then
            If lblActiveStatusHide.Text = clsUserTbl.ActiveStatus_FailedLogin Then
                ' User is temporarily inactivated because they previously failed the login attempts.
                lblAccountDisabled.Visible = True
                lblAccountDisabled.Text = "This SDIX User account has been DISABLED due to excessive invalid login attempts."
                btnActivateAccount.Visible = True
                btnInactivateAccount.Visible = True ' Allow user to inactivate this account that's disabled due to excessive login attempts just in case we no longer want the account...
            ElseIf lblActiveStatusHide.Text = clsUserTbl.ActiveStatus_Inactive Then
                lblAccountDisabled.Visible = True
                lblAccountDisabled.Text = "This SDIX User account is inactive."
                If IsUserCanReinstate() Then
                    btnActivateAccount.Visible = True ' This account is already inactive. The only thing we can do is activate it.
                End If
            Else
                ' This account is active so just allow logged in user ability to inactivate.
                btnInactivateAccount.Visible = True
                btnEmplActivateAccount.Visible = False
                btnActivateAccount.Visible = False
            End If
            'employee related
            If lblEmplActiveStatusHide.Text = "N" Then
                btnEmplInactivateAccount.Visible = False
                btnEmplActivateAccount.Visible = False
                lblEmplAccountDisabled.Visible = False
            Else
                If lblEmplActiveStatusHide.Text = clsUserTbl.EmplActiveStatus_Active Then
                    btnEmplInactivateAccount.Visible = True
                    btnEmplActivateAccount.Visible = False
                    lblEmplAccountDisabled.Visible = False
                Else
                    btnEmplInactivateAccount.Visible = False
                    btnEmplActivateAccount.Visible = True
                    lblEmplAccountDisabled.Text = "This Employee account is inactive."
                    lblEmplAccountDisabled.Visible = True
                End If
            End If  '  If lblEmplActiveStatusHide.Text = "N" Then

        Else
            ' The logged in user cannot inactivate or reinstate an account. So just show an appropriate message for the account.
            If lblActiveStatusHide.Text = clsUserTbl.ActiveStatus_FailedLogin Then
                lblAccountDisabled.Visible = True
                lblAccountDisabled.Text = "This SDIX User account has been disabled due to excessive invalid login attempts. Please contact SRM@sdi.com or call 855-796-9965. "
            ElseIf lblActiveStatusHide.Text = clsUserTbl.ActiveStatus_Inactive Then
                ' This should never happen because we don't show inactive users to a logged in user that can't reinstate an account.
                ' But we'll keep this logic just in case...
                lblAccountDisabled.Visible = True
                lblAccountDisabled.Text = "This SDIX User account in inactive."
            End If
            'employee related
            If lblEmplActiveStatusHide.Text = "N" Then
                btnEmplInactivateAccount.Visible = False
                btnEmplActivateAccount.Visible = False
                lblEmplAccountDisabled.Visible = False
            Else
                If lblEmplActiveStatusHide.Text = clsUserTbl.EmplActiveStatus_Active Then
                    btnEmplInactivateAccount.Visible = False
                    btnEmplActivateAccount.Visible = False
                    lblEmplAccountDisabled.Visible = False
                Else
                    btnEmplInactivateAccount.Visible = False
                    btnEmplActivateAccount.Visible = False
                    lblEmplAccountDisabled.Text = "This Employee account is inactive."
                    lblEmplAccountDisabled.Visible = True
                End If
            End If  ' If lblEmplActiveStatusHide.Text = "N" Then
        End If
    End Sub

    Private Sub buildGroupList(ByVal rcbUserGroups As RadComboBox)
        Dim strSQLString As String

        strSQLString = "SELECT  A.ISA_BUSINESS_UNIT as groupid,A.ISA_BUSINESS_UNIT || ' - ' || B.descr  as  groupname " & vbCrLf & _
                      " FROM  SYSADM8.PS_ISA_ENTERPRISE A, SYSADM8.PS_LOCATION_TBL B " & vbCrLf & _
                      " WHERE  B.location =  'L'|| substr(A.ISA_BUSINESS_UNIT,2) || '-01'" & vbCrLf & _
                      " AND A.BU_STATUS = '1' " & vbCrLf & _
                      " AND B.EFFDT =" & vbCrLf & _
                      " (SELECT MAX(A_ED.EFFDT) FROM PS_LOCATION_TBL A_ED " & vbCrLf & _
                      " WHERE B.SETID = A_ED.SETID" & vbCrLf & _
                      " AND B.LOCATION = A_ED.LOCATION" & vbCrLf & _
                      " AND A_ED.EFFDT <= SYSDATE)" & vbCrLf & _
                      " ORDER BY A.ISA_BUSINESS_UNIT "

        Dim dsDQLGroups As DataSet = ORDBData.GetAdapter(strSQLString)

        rcbUserGroups.DataSource = dsDQLGroups
        rcbUserGroups.DataValueField = "groupid"
        rcbUserGroups.DataTextField = "groupname"
        rcbUserGroups.DataBind()
        rcbUserGroups.Items.Insert(0, New RadComboBoxItem("CSC Agent", "0"))
        rcbUserGroups.DataValueField.Insert(0, "0")
    End Sub

    Private Sub buildSelectDropDown()
        Dim dsORUsers As DataSet = GetSelectDropDownData()
        dropSelectUser.DataSource = dsORUsers
        dropSelectUser.DataValueField = "ISA_EMPLOYEE_ID"
        dropSelectUser.DataTextField = "USERANDBU" '"ISA_USER_NAME"
        dropSelectUser.DataBind()

        dropSelectUser.Items.Insert(0, New ListItem("<< Select User >>"))

        If IsVendor() Then
            'buildSelectDropDownAP()
        End If
    End Sub

    Private Sub buildSelectDropDownAP()
        Me.drpuserAp.Visible = True
        Dim strSQLSelect As String
        Dim strSQLWhere As String
        Dim strSQLOrder As String = ""
        Dim strSQLString As String

        strSQLSelect = "SELECT ISA_USER_NAME, ISA_EMPLOYEE_ID" & vbCrLf & _
                        " FROM SDIX_USERS_TBL"
        strSQLWhere = " WHERE  ISA_SDI_EMPLOYEE = 'S'"
        If Not IsUserCanReinstate() Then
            ' If the logged in user cannot activate/inactivate an account, filter out inactive users.
            ' If the logged in user can activate/inactivate, let them see all accounts unrestricted by active status.
            strSQLOrder = "  and ACTIVE_STATUS IN ('" & clsUserTbl.ActiveStatus_Active & "','" & clsUserTbl.ActiveStatus_FailedLogin & "')" & vbCrLf
        End If
        strSQLOrder &= " ORDER BY ISA_USER_NAME"

        strSQLString = strSQLSelect & strSQLWhere & strSQLOrder

        Dim dsORUsers As DataSet = ORDBData.GetAdapter(strSQLString)

        Me.drpuserAp.DataSource = dsORUsers
        Me.drpuserAp.DataValueField = "ISA_EMPLOYEE_ID"
        Me.drpuserAp.DataTextField = "ISA_USER_NAME"
        Me.drpuserAp.DataBind()

        Me.drpuserAp.Items.Insert(0, New ListItem("<< Select User >>"))
    End Sub

    Private Function checkUserPrivs(ByVal strUserid) As Boolean
        Dim strbunit As String = " "
        'If Me.txtUserid.Text.Substring(0, 2) = "M0" Or Me.txtUserid.Text.Substring(0, 2) = "MU" Then
        If strUserid.Substring(0, 2) = "M0" Or strUserid.Substring(0, 2) = "MU" Then
            strbunit = "SDM00"
        Else
            strbunit = "ISA00"
        End If
        Dim strSQLString As String = "SELECT A.ISA_EMPLOYEE_ID" & vbCrLf & _
                        " FROM SDIX_USERS_PRIVS A" & vbCrLf & _
                        " WHERE A.BUSINESS_UNIT = '" & strbunit & "'" & vbCrLf & _
                        " AND A.ISA_EMPLOYEE_ID = '" & strUserid & "'" & vbCrLf & _
                        " AND A.ISA_IOL_OP_NAME = 'ASN'" & vbCrLf & _
                        " AND A.ISA_IOL_OP_VALUE = 'Y'" & vbCrLf & _
                        " AND A.ISA_IOL_OP_TYPE = 'SUP'"

        Dim strUserResults As String = ORDBData.GetScalar(strSQLString)
        If strUserResults Is Nothing Then
            checkUserPrivs = False
        Else
            checkUserPrivs = True
        End If
    End Function

    Private Function checkCustEmpTbl(ByVal strBU As String) As Boolean

        Dim strSQLstring As String = "Select ISA_EMPLOYEE_ID" & vbCrLf & _
                    " FROM PS_ISA_EMPL_TBL" & vbCrLf & _
                    " WHERE UPPER(isa_employee_id) = '" & txtUserid.Text.ToUpper & "'" & vbCrLf & _
                    " AND BUSINESS_UNIT = '" & strBU & "'"

        Dim dsCustUserid As DataSet = ORDBData.GetAdapter(strSQLstring)

        If dsCustUserid.Tables(0).Rows.Count = 0 Then
            checkCustEmpTbl = False
        Else
            checkCustEmpTbl = True
        End If
    End Function

    Private Function checkSDIEmpTbl() As Boolean

        Dim intSubstringLen As Integer = txtUserid.Text.Length - 1
        Dim strSQLstring As String = "SELECT OPRID" & vbCrLf & _
                    " FROM PSOPRDEFN" & vbCrLf & _
                    " WHERE OPRID like '" & txtUserid.Text.Substring(0, intSubstringLen).ToUpper & "_'" '

        Dim dsSDIUserid As DataSet = ORDBData.GetAdapter(strSQLstring)

        If txtUserid.Text = "DEMO" Then
            checkSDIEmpTbl = True
        ElseIf txtUserid.Text.Substring(0, 4).ToUpper = "TEMP" Then
            checkSDIEmpTbl = True
        ElseIf dsSDIUserid.Tables(0).Rows.Count = 0 Then
            checkSDIEmpTbl = False
        Else
            checkSDIEmpTbl = True
        End If

    End Function

    Private Function checkUserid() As Boolean
        Dim strSQLstring As String = "Select isa_user_id" & vbCrLf & _
                    " FROM SDIX_USERS_TBL" & vbCrLf & _
                    " WHERE isa_employee_id = '" & txtUserid.Text.ToUpper & "'" & vbCrLf & _
                    " AND ACTIVE_STATUS = 'A'" & vbCrLf

        Dim dsUserid As DataSet = ORDBData.GetAdapter(strSQLstring)

        If dsUserid.Tables(0).Rows.Count = 0 Then
            checkUserid = False
        ElseIf dsUserid.Tables(0).Rows.Count > 1 Then
            Dim strMessage As New Alert
            checkUserid = True
            'ltlAlert.Text = strMessage.Say("Error - User exists more than once in user table!")
        Else
            checkUserid = True
        End If
    End Function

    Private Function ExistsUserid() As Boolean
        Dim strSQLstring As String = "Select ISA_USER_ID FROM SDIX_USERS_TBL WHERE isa_employee_id = '" & Trim(txtUserid.Text.ToUpper) & "'"

        Dim dsUserid As DataSet = ORDBData.GetAdapter(strSQLstring)
        Dim bExistsUserID = False

        If dsUserid.Tables(0).Rows.Count = 0 Then
            bExistsUserID = False
        ElseIf dsUserid.Tables(0).Rows.Count > 1 Then
            Dim strMessage As New Alert
            bExistsUserID = True
            'ltlAlert.Text = strMessage.Say("Error - User exists more than once in user table!")
        Else
            bExistsUserID = True
        End If

        Return bExistsUserID
    End Function

    Private Function getPWsql(ByVal strPWencr) As String

        Dim s As String = ""

        Dim strAlert As String = "Error - password has already been used"
        Dim dteNow As Date
        dteNow = Now().ToString("d")
        Dim strSQLstring As String
        strSQLstring = "SELECT A.ISA_USER_ID, A.ISA_EMPLOYEE_ID," & vbCrLf & _
                        " A.ISA_ISOL_PW1, A.ISA_ISOL_PW_DATE1," & vbCrLf & _
                        " A.ISA_ISOL_PW2, A.ISA_ISOL_PW_DATE2," & vbCrLf & _
                        " A.ISA_ISOL_PW3, A.ISA_ISOL_PW_DATE3" & vbCrLf & _
                        " FROM SDIX_ISOL_PW A" & vbCrLf & _
                        " WHERE A.ISA_USER_ID = '" & lblUserIDHide.Text & "'" & vbCrLf & _
                        " AND A.ISA_EMPLOYEE_ID = '" & txtUserid.Text & "'"

        Try
            Dim dtrPWReader As OleDbDataReader = ORDBData.GetReader(strSQLstring)
            ' Log whenever connection is established with the DB: Vijay - 2/15/2013
            Dim m_weblogstring As String = CStr(ConfigurationSettings.AppSettings("Weblogstring")).Trim
            If m_weblogstring = "true" Then
                'WebLogOpenConn()
            End If
            If dtrPWReader.Read() Then
                If dtrPWReader.Item("ISA_ISOL_PW1") = strPWencr Or _
                    dtrPWReader.Item("ISA_ISOL_PW2") = strPWencr Or _
                    dtrPWReader.Item("ISA_ISOL_PW3") = strPWencr Then
                    'getPWsql = strAlert
                    s = strAlert
                    dtrPWReader.Close()
                    'Log whenever connection is closed with the DB: Vijay - 2/15/2013
                    If m_weblogstring = "true" Then
                        'WebLogCloseConn()
                    End If
                    'Exit Function
                    Return (s)
                End If
                Dim pw2 As String = " "
                Try
                    pw2 = CStr(dtrPWReader.Item("ISA_ISOL_PW1")).Trim
                Catch ex As Exception
                    pw2 = " "
                End Try
                Dim dt2 As String = ""
                Try
                    dt2 = CStr(dtrPWReader.Item("ISA_ISOL_PW_DATE1")).Trim
                    If dt2.Length > 0 Then
                        dt2 = CDate(dt2).ToString("MM/dd/yyyy")
                    End If
                Catch ex As Exception
                    dt2 = ""
                End Try
                Dim pw3 As String = " "
                Try
                    pw3 = CStr(dtrPWReader.Item("ISA_ISOL_PW2")).Trim
                Catch ex As Exception
                    pw3 = " "
                End Try
                Dim dt3 As String = ""
                Try
                    dt3 = CStr(dtrPWReader.Item("ISA_ISOL_PW_DATE2")).Trim
                    If dt3.Length > 0 Then
                        dt3 = CDate(dt3).ToString("MM/dd/yyyy")
                    End If
                Catch ex As Exception
                    dt3 = ""
                End Try
                s = ""
                s &= "" & _
                     "UPDATE SDIX_ISOL_PW " & vbCrLf & _
                     "SET " & vbCrLf & _
                     " ISA_ISOL_PW1 = '" & strPWencr & "' " & vbCrLf & _
                     ",ISA_ISOL_PW_DATE1 = TO_DATE('" & dteNow.ToString("MM/dd/yyyy") & "', 'MM/DD/YYYY') " & vbCrLf & _
                     ""
                If pw2.Trim.Length > 0 And _
                   dt2.Trim.Length > 0 Then
                    s &= "" & _
                         ",ISA_ISOL_PW2 = '" & pw2 & "' " & vbCrLf & _
                         ",ISA_ISOL_PW_DATE2 = TO_DATE('" & dt2 & "', 'MM/DD/YYYY') " & vbCrLf & _
                         ""
                Else
                    s &= "" & _
                         ",ISA_ISOL_PW2 = ' ' " & vbCrLf & _
                         ",ISA_ISOL_PW_DATE2 = NULL " & vbCrLf & _
                         ""
                End If
                If pw3.Trim.Length > 0 And _
                   dt3.Trim.Length > 0 Then
                    s &= "" & _
                         ",ISA_ISOL_PW3 = '" & pw3 & "' " & vbCrLf & _
                         ",ISA_ISOL_PW_DATE3 = TO_DATE('" & dt3 & "', 'MM/DD/YYYY') " & vbCrLf & _
                         ""
                Else
                    s &= "" & _
                         ",ISA_ISOL_PW3 = ' ' " & vbCrLf & _
                         ",ISA_ISOL_PW_DATE3 = NULL " & vbCrLf & _
                         ""
                End If
                s &= "" & _
                     "WHERE ISA_USER_ID = '" & lblUserIDHide.Text & "' " & vbCrLf & _
                     "  AND ISA_EMPLOYEE_ID = '" & txtUserid.Text & "' " & vbCrLf & _
                     ""
            Else
                s = ""
                s &= "" & _
                     "INSERT INTO SDIX_ISOL_PW " & vbCrLf & _
                     "(" & vbCrLf & _
                     " ISA_USER_ID " & vbCrLf & _
                     ",ISA_EMPLOYEE_ID " & vbCrLf & _
                     ",ISA_ISOL_PW1 " & vbCrLf & _
                     ",ISA_ISOL_PW_DATE1 " & vbCrLf & _
                     ",ISA_ISOL_PW2 " & vbCrLf & _
                     ",ISA_ISOL_PW_DATE2 " & vbCrLf & _
                     ",ISA_ISOL_PW3 " & vbCrLf & _
                     ",ISA_ISOL_PW_DATE3 " & vbCrLf & _
                     ") " & vbCrLf & _
                     "VALUES " & vbCrLf & _
                     "(" & vbCrLf & _
                     " " & lblUserIDHide.Text & vbCrLf & _
                     ",'" & txtUserid.Text & "' " & vbCrLf & _
                     ",'" & strPWencr & "' " & vbCrLf & _
                     ",TO_DATE('" & dteNow.ToString("MM/dd/yyyy") & "', 'MM/DD/YYYY') " & vbCrLf & _
                     ",' ' " & vbCrLf & _
                     ",NULL " & vbCrLf & _
                     ",' ' " & vbCrLf & _
                     ",NULL " & vbCrLf & _
                     ") " & vbCrLf & _
                     ""
            End If

            dtrPWReader.Close()
            'WebLogCloseConn()

        Catch objException As Exception
            'Response.Write("We're sorry, we are experiencing technical problems...")
            'Response.Write("<hr>")
            'Response.Write("<li>Message: " & objException.Message)
            'Response.Write("<li>Source: " & objException.Source)
            'Response.Write("<li>Stack Trace: " & objException.StackTrace)
            'Response.Write("<li>Target Site: " & objException.TargetSite.Name)
            'Response.End()
            sendErrorEmail(objException.ToString, "NO", Request.ServerVariables("URL"), strSQLstring)
            Response.Redirect("DBErrorPage.aspx?HOME=N")
        End Try

        Return (s)
    End Function

    Sub ProfileUpdate()

        Dim strMessage As New Alert
        If Request.ServerVariables("HTTP_HOST").ToString().ToUpper.Substring(0, 6) = "CPTEST" And _
            Session("USERNAME").toupper = "SDI TEMP USER" Then
            ltlAlert.Text = strMessage.Say("Warning - Profile update has been disabled in test")
            Exit Sub
        End If
        If Session("USERNAME").toupper = "USER NAME" Then
            ltlAlert.Text = strMessage.Say("Warning - Profile update has been disabled for User DEMO")
            Exit Sub
        End If


        'Exit Sub

        Dim strUserGroup As String = String.Empty
        Dim strRndCplusPassw As String = String.Empty
        Dim strUserType As String = String.Empty
        Dim strSDICust As String = String.Empty
        Dim strSQLString As String = String.Empty
        Dim strSQLPW As String = String.Empty
        Dim strPasswEncrp As String = String.Empty
        Dim strSQLUPD1 As String = String.Empty
        Dim strSQLUPD2 As String = String.Empty
        Dim strPasswUpdate As String = String.Empty
        Dim strVendorIdCreator As String = String.Empty
        Try
            strVendorIdCreator = Session("VendorID_Data")
        Catch ex As Exception
            strVendorIdCreator = ""
        End Try
        
        Dim dteNow As Date
        dteNow = Now().ToString("d")

        Dim strFirst As String = Trim(txtFirst.Text)
        strFirst = Replace(strFirst, "'", "")
        Dim strLast As String = Trim(txtLast.Text)
        strLast = Replace(strLast, "'", "")
        Dim strFullName As String = strLast & "," & strFirst
        Dim strFullName40 As String = strLast & "," & strFirst
        If strFullName.Length > 50 Then
            strFullName = strFullName.Substring(0, 50)
        End If
        If strFullName40.Length > 40 Then
            strFullName40 = strFullName40.Substring(0, 40)
        End If
        Dim strPhone As String = txtPhone.Text
        strPhone = Replace(strPhone, "(", "")
        strPhone = Replace(strPhone, ")", "")
        strPhone = Replace(strPhone, " ", "-")
        'Dim strUSERID As String = GetDisplayedUserID()
        Dim strUSERID As String = String.Empty
        If Page_Action = "ADD" Then

            Dim FirstPart_UserID As String
            Dim SecondPart_UserID As String

            If strFirst.Length > 3 And strLast.Length > 3 Then
                FirstPart_UserID = strFirst.Substring(0, 3)
                SecondPart_UserID = strLast.Substring(0, 3)
            ElseIf strFirst.Length < 3 And strLast.Length < 3 Then
                FirstPart_UserID = strFirst.Substring(0, strFirst.Length)
                SecondPart_UserID = strLast.Substring(0, strLast.Length)
            ElseIf strFirst.Length > 3 Or strLast.Length < 3 Then
                SecondPart_UserID = strLast.Substring(0, strLast.Length)
                If strFirst.Length <> 3 Then
                    If strLast.Length = 1 Then
                        FirstPart_UserID = strFirst.Substring(0, 5)
                    ElseIf strLast.Length = 2 Then
                        FirstPart_UserID = strFirst.Substring(0, 4)
                    ElseIf strLast.Length = 3 Then
                        FirstPart_UserID = strFirst.Substring(0, 3)
                    End If
                Else
                    FirstPart_UserID = strFirst.Substring(0, strFirst.Length)
                End If
            ElseIf strFirst.Length < 3 Or strLast.Length > 3 Then
                FirstPart_UserID = strFirst.Substring(0, strFirst.Length)
                If strLast.Length <> 3 Then
                    If strFirst.Length = 1 Then
                        SecondPart_UserID = strLast.Substring(0, 5)
                    ElseIf strFirst.Length = 2 Then
                        SecondPart_UserID = strLast.Substring(0, 4)
                    ElseIf strFirst.Length = 3 Then
                        SecondPart_UserID = strLast.Substring(0, 3)
                    End If
                Else
                    SecondPart_UserID = strLast.Substring(0, strLast.Length)
                End If
            Else
                FirstPart_UserID = strFirst.Substring(0, 3)
                SecondPart_UserID = strLast.Substring(0, 3)
            End If

            Dim usrid As String = FirstPart_UserID + SecondPart_UserID

            If usrid.Length < 6 Then
                If usrid.Length = 5 Then
                    usrid = usrid + "0"
                ElseIf usrid.Length = 4 Then
                    usrid = usrid + "00"
                ElseIf usrid.Length = 3 Then
                    usrid = usrid + "000"
                ElseIf usrid.Length = 2 Then
                    usrid = usrid + "0000"
                End If
            End If

            Dim VerifiedUsrID As Boolean = False
            Dim strQuerystring As String
            'Dim dsUsertbl As DataSet
            Dim strSQLUserIdQuery As String = "Select USERID_SEQ from ISA_USERID_SEQ order by USERID_SEQ desc"
            Dim dsOREmp As DataSet = ORDBData.GetAdapter(strSQLUserIdQuery)

            If dsOREmp.Tables(0).Rows.Count > 0 Then
                Dim Prev_UserID As String = Convert.ToString(dsOREmp.Tables(0).Rows(0).Item("USERID_SEQ"))

                Dim Inc_Count As Integer = 1
                If Prev_UserID <> "" Then
                    Do
                        Dim UserIDval As Integer = Convert.ToInt32(Prev_UserID) + Inc_Count
                        Dim strUser_ID_Created As String = Convert.ToString(UserIDval)
                        If strUser_ID_Created.Length = 1 Then
                            strUser_ID_Created = "000" + strUser_ID_Created
                        ElseIf strUser_ID_Created.Length = 2 Then
                            strUser_ID_Created = "00" + strUser_ID_Created
                        ElseIf strUser_ID_Created.Length = 3 Then
                            strUser_ID_Created = "0" + strUser_ID_Created
                        Else

                        End If

                        'Dim UserID_Created As String = FirstPart_UserID + SecondPart_UserID + strUser_ID_Created
                        'strUSERID = UserID_Created.ToUpper
                        Dim UserID_Created As String = usrid + strUser_ID_Created

                        Dim userIDLen As Integer = UserID_Created.Length

                        If userIDLen > 10 Then
                            userIDLen = userIDLen - 10
                            usrid = usrid.Substring(0, usrid.Length - userIDLen)
                            UserID_Created = usrid + strUser_ID_Created
                        End If

                        strUSERID = UserID_Created.ToUpper


                        strQuerystring = "Select ISA_USER_ID FROM SDIX_USERS_TBL WHERE isa_employee_id = '" & strUSERID & "'"

                        Dim dsUserid As DataSet = ORDBData.GetAdapter(strQuerystring)

                        If dsUserid.Tables(0).Rows.Count > 0 Then
                            VerifiedUsrID = True
                            Inc_Count = Inc_Count + 1
                        Else
                            VerifiedUsrID = False
                        End If
                    Loop Until (VerifiedUsrID = False)
                    UpdateUserIDSeqTBL(Inc_Count)
                Else
                    Exit Sub
                End If
            End If
        ElseIf Page_Action = "EDIT" Then
            strUSERID = GetDisplayedUserID()
        End If

        Dim strBU As String = String.Empty

        GetSelectedBUandGroup(strBU, strUserGroup)

        If strBU = "0" Then
            ltlAlert.Text = strMessage.Say("Error - Invalid BU - check productview id's!")
            Exit Sub
        ElseIf strBU.Trim.Length = 0 Then
            ltlAlert.Text = strMessage.Say("Please select a valid User Group (business unit).")
            Exit Sub
        ElseIf MultiSiteChk.Checked = True Then
            If rcbMultiSelect.CheckedItems.Count = 0 Then
                ltlAlert.Text = strMessage.Say("Please select a business unit to access the multi site.")
                Exit Sub
            End If

        End If

        strRndCplusPassw = GenerateRndPassword(strUSERID, False, "")

        GetDisplayedUserType(strSDICust, strUserType)
        Dim sSDIEmp As String = ConvertSDICustToSDIEmp(strSDICust)

        If Not txtPassword.Text = "" Then
            strPasswEncrp = GenerateHash(txtPassword.Text)
            strPasswUpdate = " ISA_PASSWORD_ENCR = '" & strPasswEncrp & "'," & vbCrLf
        End If
        Dim IsBaseBU As Boolean = False
        Dim multiBU As String = String.Empty
        If Page_Action = "ADD" Then
            Dim strFromWhichScreen As String = "Profile.aspx/ProfileUpdate"
            Dim lngIsaUserId As Long = GetNextUserId(strUSERID, strBU, strFromWhichScreen)

            strSQLString = "INSERT INTO SDIX_USERS_TBL" & vbCrLf & _
                        " (ISA_USER_ID, ISA_USER_NAME," & vbCrLf & _
                        " ISA_PASSWORD_ENCR, FIRST_NAME_SRCH," & vbCrLf & _
                        " LAST_NAME_SRCH, BUSINESS_UNIT," & vbCrLf & _
                        " ISA_EMPLOYEE_ID, ISA_EMPLOYEE_NAME, PHONE_NUM," & vbCrLf & _
                        " ISA_DAILY_ALLOW, ISA_EMPLOYEE_PASSW," & vbCrLf & _
                        " ISA_EMPLOYEE_EMAIL, ISA_EMPLOYEE_ACTYP," & vbCrLf & _
                        " CUST_ID, ISA_SESSION," & vbCrLf & _
                        " ISA_LAST_SYNC_DATE, ISA_SDI_EMPLOYEE, ISA_CUST_SERV_FLG," & vbCrLf & _
                        " LASTUPDOPRID, LASTUPDDTTM, ACTIVE_STATUS, LAST_ACTIVITY, ISA_VENDOR_ID)" & vbCrLf & _
                        " VALUES(" & lngIsaUserId & "," & vbCrLf & _
                        " '" & strFullName.ToUpper & "'," & vbCrLf & _
                        " '" & strPasswEncrp & "'," & vbCrLf & _
                        " '" & strFirst.ToUpper & "'," & vbCrLf & _
                        " '" & strLast.ToUpper & "'," & vbCrLf & _
                        " '" & strBU & "'," & vbCrLf & _
                        " '" & strUSERID & "'," & vbCrLf & _
                        " '" & strFullName40.ToUpper & "'," & vbCrLf & _
                        " '" & strPhone & "'," & vbCrLf & _
                        " 0, ' ', '" & Trim(txtEmail.Text) & "'," & vbCrLf & _
                        " '" & strUserType & "'," & vbCrLf & _
                        " '0', 0, '', '" & strSDICust & "', ' '," & vbCrLf & _
                        " '" & Session("USERID") & "'," & vbCrLf & _
                        " TO_DATE('" & Now().ToString() & "', 'MM/DD/YYYY HH:MI:SS AM')," & vbCrLf & _
                        " 'A', TO_DATE('" & Now() & "', 'MM/DD/YYYY HH:MI:SS AM'),'" & strVendorIdCreator & "')"

            strSQLPW = "INSERT INTO SDIX_ISOL_PW" & vbCrLf & _
                        " (ISA_USER_ID, ISA_EMPLOYEE_ID," & vbCrLf & _
                        " ISA_ISOL_PW1, ISA_ISOL_PW_DATE1," & vbCrLf & _
                        " ISA_ISOL_PW2, ISA_ISOL_PW_DATE2," & vbCrLf & _
                        " ISA_ISOL_PW3, ISA_ISOL_PW_DATE3)" & vbCrLf & _
                        " VALUES (" & lngIsaUserId & "," & vbCrLf & _
                        " '" & strUSERID & "'," & vbCrLf & _
                        " '" & strPasswEncrp & "'," & vbCrLf & _
                        " TO_DATE('" & dteNow & "', 'MM/DD/YYYY')," & vbCrLf & _
                        " ' ', '', ' ','')"

        ElseIf Page_Action = "EDIT" Then
            strSQLUPD1 = "UPDATE SDIX_USERS_TBL" & vbCrLf & _
                        " SET ISA_USER_NAME = '" & strFullName.ToUpper & "'," & vbCrLf

            strSQLUPD2 = " FIRST_NAME_SRCH = '" & strFirst.ToUpper & "'," & vbCrLf & _
                        " LAST_NAME_SRCH = '" & strLast.ToUpper & "'," & vbCrLf & _
                        " BUSINESS_UNIT = '" & strBU & "'," & vbCrLf & _
                        " ISA_EMPLOYEE_NAME = '" & strFullName40.ToUpper & "'," & vbCrLf & _
                        " PHONE_NUM = '" & strPhone & "'," & vbCrLf & _
                        " ISA_EMPLOYEE_EMAIL = '" & Trim(txtEmail.Text) & "'," & vbCrLf

            If roleDropdownList.Visible Then
                If Not Trim(strUserType) = "" Then
                    strSQLUPD2 = strSQLUPD2 & " ISA_EMPLOYEE_ACTYP = '" & strUserType & "'," & vbCrLf
                End If
                If Not Trim(strSDICust) = "" Then
                    strSQLUPD2 = strSQLUPD2 & " ISA_SDI_EMPLOYEE = '" & strSDICust & "'," & vbCrLf
                End If
            End If
           

            If MultiSiteChk.Checked And rcbMultiSelect.CheckedItems.Count > 1 Then
                strSQLUPD2 = strSQLUPD2 & " MULTI_SITE  ='Y'," & vbCrLf
            Else
                strSQLUPD2 = strSQLUPD2 & " MULTI_SITE  =' '," & vbCrLf
                rcbMultiSelect.ClearCheckedItems()
                MultiSiteChk.Checked = False
                rcbMultiSelect.Visible = False
            End If

            strSQLUPD2 = strSQLUPD2 & _
                    " LASTUPDOPRID = '" & Session("USERID") & "'," & vbCrLf & _
                    " LASTUPDDTTM = TO_DATE('" & Now().ToString() & "', 'MM/DD/YYYY HH:MI:SS AM')" & vbCrLf & _
                    " WHERE ISA_EMPLOYEE_ID = '" & Trim(strUSERID).ToUpper & "'"

            strSQLString = strSQLUPD1 & strPasswUpdate & strSQLUPD2
            If Not txtPassword.Text = "" Then
                strSQLPW = getPWsql(strPasswEncrp)
                If strSQLPW.Substring(0, 5) = "Error" Then
                    ltlAlert.Text = strMessage.Say(strSQLPW)
                    Exit Sub
                End If
            End If
        End If

        Dim rowsaffected As Integer = ORDBData.ExecNonQuery(strSQLString)
        If rowsaffected = 0 Then
            lblDBError.Text = "Error Updating ISA_USERS_TBL Table"
            lblDBError.Visible = True
            Exit Sub
        Else
          
            Dim query As String = "DELETE FROM SDIX_MULTI_SITE WHERE ISA_EMPLOYEE_ID='" & strUSERID & "'"
            ORDBData.ExecNonQuery(query)
            'If Page_Action = "ADD" Then
            '    UpdateUserIDSeqTBL()
            'End If

            If rcbMultiSelect.CheckedItems.Count > 1 Then

                For Each item As RadComboBoxItem In rcbMultiSelect.CheckedItems
                    multiBU = item.Value
                   
                    query = "INSERT INTO SDIX_MULTI_SITE VALUES('" & strUSERID & "','" & multiBU & "','" & Session("USERID") & "',TO_DATE('" & Now().ToString() & "', 'MM/DD/YYYY HH:MI:SS AM'))"
                    ORDBData.ExecNonQuery(query)
                Next
              

            End If

            
        End If
        If Not txtPassword.Text = "" Then
            rowsaffected = ORDBData.ExecNonQuery(strSQLPW)
            If rowsaffected = 0 Then
                lblDBError.Text = "Error Updating ISA_ISOL_PW Table"
                lblDBError.Visible = True
                Exit Sub
            End If
        End If
        If strSDICust = "C" Then
            If checkCustEmpTbl(strBU) = False Then
                

                strSQLString = "Insert Into PS_ISA_EMPL_TBL" & vbCrLf & _
                                " ( BUSINESS_UNIT, ISA_EMPLOYEE_ID," & vbCrLf & _
                                " ISA_EMPLOYEE_NAME, ISA_DAILY_ALLOW," & vbCrLf & _
                                " ISA_EMPLOYEE_PASSW, ISA_EMPLOYEE_EMAIL," & vbCrLf & _
                                " ISA_EMPLOYEE_ACTYP, CUST_ID, EFF_STATUS) " & vbCrLf & _
                               " Values('" & strBU & "'," & vbCrLf & _
                               "'" & strUSERID.ToUpper & "'," & vbCrLf & _
                               "'" & strFullName40.ToUpper & "'" & vbCrLf & _
                               ",0,' '," & vbCrLf & _
                               "' '," & vbCrLf & _
                               "' ', ' ', 'A')" & vbCrLf

                rowsaffected = ORDBData.ExecNonQuery(strSQLString)
                If rowsaffected = 0 Then
                    lblDBError.Text = "Error Updating PS_ISA_EMPL_TBL Table"
                    lblDBError.Visible = True
                    Exit Sub
                End If

            End If
        End If

        If Not strBU = "SDI00" And Not strBU = "SDM00" Then
            

        Else
            Dim strbunit As String = " "
            'If Me.txtUserid.Text.Substring(0, 2) = "M0" Or Me.txtUserid.Text.Substring(0, 2) = "MU" Then
            If strUSERID.Substring(0, 2) = "M0" Or strUSERID.Substring(0, 2) = "MU" Then
                strbunit = "SDM00"
            Else
                strbunit = "ISA00"
            End If
            'Dim bolUserPrivs As Boolean = checkUserPrivs(Trim(txtUserid.Text).ToUpper)
            Dim bolUserPrivs As Boolean = checkUserPrivs(Trim(strUSERID).ToUpper)

            If bolUserPrivs = False Then
                strSQLString = "INSERT INTO SDIX_USERS_PRIVS" & vbCrLf & _
                    " (ISA_EMPLOYEE_ID," & vbCrLf & _
                    " BUSINESS_UNIT," & vbCrLf & _
                    " ISA_IOL_OP_NAME," & vbCrLf & _
                    " ISA_IOL_OP_VALUE," & vbCrLf & _
                    " ISA_IOL_OP_TYPE," & vbCrLf & _
                    " LASTUPDOPRID," & vbCrLf & _
                    " LASTUPDDTTM)" & vbCrLf & _
                    " VALUES('" & strUSERID.ToUpper & "'," & vbCrLf & _
                    " '" & strbunit & "'," & vbCrLf & _
                    " 'ASN','Y'," & vbCrLf & _
                    " 'SUP'," & vbCrLf & _
                    " '" & Session("USERID") & "'," & vbCrLf & _
                    " TO_DATE('" & Now().ToString() & "', 'MM/DD/YYYY HH:MI:SS AM'))"


                rowsaffected = ORDBData.ExecNonQuery(strSQLString)
                If rowsaffected = 0 Then
                    lblDBError.Text = "Error Updating ISA_USERS_PRIVS Table"
                    lblDBError.Visible = True
                    Exit Sub
                End If
            End If
        End If

        '  End If
        If Page_Action = "ADD" Then
            UserCreated = strUSERID
            resetallfields()
        Else
            lblMessage.Text = "User information has been modified and saved successfully."
            setuppasswordfields("REMOVE")
            tr_Cpwd_fields.Style.Add("display", "none")
            tr_pwd_fields.Style.Add("display", "none")
        End If

    End Sub

    Private Sub resetallfields()

        txtFirst.Text = ""
        txtLast.Text = ""
        txtEmail.Text = ""
        txtPhone.Text = ""
        txtUserid.Text = ""
        lblUserIDHide.Text = ""
        lblActiveStatusHide.Text = ""
        txtPassword.Text = ""
        txtConfirm.Text = ""
        txtPassword.Attributes("value") = ""
        txtConfirm.Attributes("value") = ""
        rcbGroup.SelectedIndex = Nothing
        buildGroupList(rcbGroup)
        roleDropdownList.ClearSelection()
        'roleDropdownList.Items.Insert(0, New ListItem("Select Type", "0"))
        ErrorlabelUserId.Text = ""
        ErrorlabelUserId.Visible = False
        drpBUnit.SelectedValue = "0"


        'drpUserType.SelectedIndex = 0
        'lblMessage.Text = "New user has been added. Please modify the user's privileges and preferences in Edit Mode."
        lblMessage.Text = "New user-<b>" + UserCreated + "</b> created successfully."
        UserCreated = String.Empty

    End Sub

    Private Sub sendEmail(ByVal strGroupName, ByVal strUserType, ByVal strSDICust)
        strSDICust = ConvertSDICustToSDIEmp(strSDICust)
        Dim Mailer = New MailMessage
        Dim strccfirst As String = "pete.doyle"
        Dim strcclast As String = "sdi.com"
        Mailer.to = strccfirst & "@" & strcclast
        Mailer.From = "SDIExchange@SDI.com"
        Mailer.cc = ""
        If lblAction.Text = "ADD" Then
            Mailer.subject = "SDiExchange - Profile Added"
            Mailer.body = "SDiExchange - Profile Added" & vbCrLf & vbCrLf
        Else
            Mailer.subject = "SDiExchange - Profile Updated"
            Mailer.body = "SDiExchange - Profile Updated" & vbCrLf & vbCrLf
        End If

        Mailer.body = Mailer.body & "	First Name: " & txtFirst.Text & vbCrLf
        Mailer.body = Mailer.body & "	Last Name:  " & txtLast.Text & vbCrLf
        Mailer.body = Mailer.body & "	Email:      " & txtEmail.Text & vbCrLf
        Mailer.body = Mailer.body & "	Phone:      " & txtPhone.Text & vbCrLf
        Mailer.body = Mailer.body & "	UserID:     " & txtUserid.Text & vbCrLf
        Mailer.body = Mailer.body & "	User Type:  " & strUserType & vbCrLf
        Mailer.body = Mailer.body & "	SDI/CUST:   " & strSDICust & vbCrLf
        Mailer.body = Mailer.body & "	GroupName:  " & strGroupName & vbCrLf
        'SmtpMail.Send(Mailer)
        Insiteonline.WebPartnerFunctions.WebPSharedFunc.sendemail(Mailer)

    End Sub

    Sub setuppasswordfields(ByVal strAction)
        tr_pwd_fields.Style.Remove("display")
        tr_Cpwd_fields.Style.Remove("display")
        If strAction = "SETUP" Or strAction = "PWCHANGE" Then
            btnChangePassw.Visible = False
            lblPassword.Visible = True
            lblConfirm.Visible = True
            txtPassword.Visible = True
            txtConfirm.Visible = True
            If strAction = "PWCHANGE" Then
                valPassword.Enabled = True
                valConfirm.Enabled = True
                valConfirm2.Enabled = True
            End If
        Else
            If Session("PUNCHIN") = "YES" Then
                btnChangePassw.Visible = False
            Else
                btnChangePassw.Visible = True
            End If
            lblPassword.Visible = False
            lblConfirm.Visible = False
            txtPassword.Visible = False
            txtConfirm.Visible = False
        End If

    End Sub

    Protected Sub turnvalidationoff()
        valFirst.Enabled = False
        valLast.Enabled = False
        valPassword.Enabled = False
        valEmail1.Enabled = False
        valEmail2.Enabled = False
        valConfirm.Enabled = False
        valuserid1.Enabled = False
        valUserid2.Enabled = False
        valGroup.Enabled = False
        valPhone1.Enabled = False
        valPhone2.Enabled = False
        valConfirm2.Enabled = False
        Val_txtVendorID.Enabled = False
        valType.Enabled = False
    End Sub

    Protected Sub valUserid2_ServerValidate(ByVal source As System.Object, ByVal args As System.Web.UI.WebControls.ServerValidateEventArgs) Handles valUserid2.ServerValidate

        Dim bolUseridexist As Boolean = ExistsUserid()  '  checkUserid()
        If bolUseridexist = True Then
            valUserid2.ErrorMessage = "User ID already exists"
            valUserid2.IsValid = False
            args.IsValid = False
        End If

    End Sub

    Private Sub dropSelectUser_SelectedIndexChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles dropSelectUser.SelectedIndexChanged
        drpBUnit.Visible = True
        lblBusUnit.Visible = True
        lblSelectUser.Visible = True
        buildEditUser(dropSelectUser.SelectedValue)
        If Session("PUNCHIN") = "YES" Then
            btnChangePassw.Visible = False
        Else
            btnChangePassw.Visible = True
        End If

    End Sub

    Private Sub btnChangePassw_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnChangePassw.Click
        setuppasswordfields("PWCHANGE")

    End Sub

    Private Sub btnAccess_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAccess.Click

        If Session("BUSUNIT") = "" Then
            Session.RemoveAll()
            Response.Redirect("default.aspx")
        End If

        Dim strBU As String
        Dim strMessage As New Alert
        If Session("USERTYPE") = "SUPER" Then

            strBU = GetBUbyGroup(rcbGroup.Items(rcbGroup.SelectedIndex).Value)
            If strBU = "" Then
                ltlAlert.Text = strMessage.Say("Error - No Business Unit Selected!")
                Exit Sub
            End If
        Else
            strBU = GetBUbyGroup(txtGroupID.Text)
        End If

        If strBU = "0" Then
            ltlAlert.Text = strMessage.Say("Error - Invalid BU - check productview id's!")
            Exit Sub
        End If

        ''new RadWindow code
        Dim tmp As String = ""  '  http://" & Request.ServerVariables("HTTP_HOST") & GetWebAppName1()
        tmp = "accessprivs.aspx?userid=" & txtUserid.Text & "&userbu=" & strBU & "&operid=" & Session("USERID") & "&usertype=" & Session("USERTYPE") & "&FROMRAD=RAD"

        RadWindowProfilePrivs.NavigateUrl = tmp
        RadWindowProfilePrivs.OnClientClose = "OnClientCloseProfile"
        RadWindowProfilePrivs.Title = "Update Access Privileges"
        Dim script As String = "function f(){$find(""" + RadWindowProfilePrivs.ClientID + """).show(); Sys.Application.remove_load(f);}Sys.Application.add_load(f);"
        ScriptManager.RegisterStartupScript(Page, Page.GetType(), "key", script, True)

    End Sub

    Private Sub btnStatEml_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnStatEml.Click

        If Session("BUSUNIT") = "" Then
            Session.RemoveAll()
            Response.Redirect("default.aspx")
        End If

        Dim strBU As String
        Dim strMessage As New Alert
        If Session("USERTYPE") = "SUPER" Then
            strBU = GetBUbyGroup(rcbGroup.Items(rcbGroup.SelectedIndex).Value)
        Else
            strBU = GetBUbyGroup(txtGroupID.Text)
        End If
        'pppppppppppppppfd
        If strBU = "0" Then
            ltlAlert.Text = strMessage.Say("Error - Invalid Business Unit - check productview id's!")
            Exit Sub
        End If

        Dim strScript As String = ""

        strScript = "<script>"
        strScript = strScript & "window.showModalDialog('AccOrdStatEml.aspx?userid=" & txtUserid.Text & "&userbu=" & strBU & "&operid=" & Session("USERID") & "&usertype=" & Session("USERTYPE") & "',null,'status:no;dialogWidth:700px;dialogHeight:590px;dialogHide:true;help:no;scroll:yes');"
        'strScript = strScript & "window.open('accessprivs.aspx?userid=" & txtUserid.Text & "&userbu=" & strBU & "&operid=" & Session("USERID") & "&usertype=" & Session("USERTYPE") & "',null,'height=500,width=700,status=yes,toolbar=no,menubar=no,location=no,left=50,top=50');"
        'strScript = strScript & "document.frmProfileContent.submit();"
        strScript = strScript & "document.forms[0].submit();"
        strScript = strScript & "</script>"
        Page.RegisterStartupScript("ClientScript", strScript)

    End Sub

    Private Sub btnApprovals_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnApprovals.Click
        If Session("BUSUNIT") = "" Then
            Session.RemoveAll()
            Response.Redirect("default.aspx")
        End If

        Dim strBU As String
        Dim strMessage As New Alert
        If Session("USERTYPE") = "SUPER" Then
            strBU = GetBUbyGroup(rcbGroup.Items(rcbGroup.SelectedIndex).Value)
        Else
            strBU = GetBUbyGroup(txtGroupID.Text)
        End If
        'ppppppppppppppppppppfd
        If strBU = "0" Then
            ltlAlert.Text = strMessage.Say("Error - Invalid Business Unit - check productview id's!")
            Exit Sub
        End If

        Dim sOrdApprType As String = "O"
        'Dim objEnterprise As New clsEnterprise(strBU)
        Select Case sOrdApprType  '  objEnterprise.OrdApprType
            Case "O", "D", "M"
                'OK 
            Case Else
                ltlAlert.Text = strMessage.Say("Business unit is not set up as an approver site.")
                Exit Sub
        End Select

        Dim strScript As String = ""

        strScript = "<script>"
        strScript = strScript & "window.showModalDialog('approvals.aspx?userid=" & txtUserid.Text & "&userbu=" & strBU & "&operid=" & Session("USERID") & "&usertype=" & Session("USERTYPE") & "',null,'status:no;dialogWidth:750px;dialogHeight:500px;dialogHide:true;help:no;scroll:no');"
        'strScript = strScript & "window.open('accessprivs.aspx?userid=" & txtUserid.Text & "&userbu=" & strBU & "&operid=" & Session("USERID") & "&usertype=" & Session("USERTYPE") & "',null,'height=500,width=700,status=yes,toolbar=no,menubar=no,location=no,left=50,top=50');"
        'strScript = strScript & "document.frmProfileContent.submit();"
        strScript = strScript & "document.forms[0].submit();"
        strScript = strScript & "</script>"
        Page.RegisterStartupScript("ClientScript", strScript)
    End Sub

    Private Sub btnAdd_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnAdd.Click
        Session("V_PageAction") = "ADD"
        lblMessage.Text = ""
        tr_Cpwd_fields.Style.Remove("display")
        tr_pwd_fields.Style.Remove("display")
        tr_SelectUser_fields.Style.Add("display", "none")
        tbStripUserDetails.Tabs.FindTabByValue("UPVL").Visible = False
        If Session("V_USERTYPEVALUE") = "V" Then
            If Session("V_ROLE_Type") = "ADMIN" Then
                TextBox_VendorId.Visible = True
                TextBox_VendorId.Text = Session("VendorID_Data")
                TextBox_VendorId.Enabled = True
                Label_VendorID.Visible = True
                lblUserid.Visible = True
                txtUserid.Visible = True
                txtUserid.Enabled = True
                btnAdd.Visible = False
                btnEdit.Visible = True
                txtFirst.Text = ""
                txtLast.Text = ""
                txtEmail.Text = ""
                txtPhone.Text = ""
                lblSelectUser.Visible = False
                dropSelectUser.Visible = False
                lblPassword.Visible = True
                lblConfirm.Visible = True
                txtPassword.Visible = True
                txtConfirm.Visible = True
                btnChangePassw.Visible = False
                roleDropdownList.Visible = True
                roleDropdownList.Items.Insert(0, New ListItem("Select Type", "0"))
                roleDropdownList.SelectedIndex = 0
                drpBUnit.Enabled = True
                drpBUnit.SelectedIndex = 0
                txtUserid.Text = ""
                drpBUnit.SelectedValue = "0"
            End If
        End If

    End Sub

    Private Sub drpBUnit_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles drpBUnit.SelectedIndexChanged
        buildSelectDropDown()
    End Sub

    Private Sub btnEdit_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnEdit.Click
        Session("V_PageAction") = "EDIT"
        If Trim(lblMexico.Text) = "" Then
            Response.Redirect("VendorProfile.aspx")
        Else
            Response.Redirect("VendorProfile.aspx")
        End If
    End Sub

    Protected Sub tbStripUserDetails_TabClick(ByVal sender As Object, ByVal e As RadTabStripEventArgs)
        RadMultiPage1.RenderSelectedPageOnly = True
        RadMultiPage1.SelectedIndex = tbStripUserDetails.SelectedIndex
        'System.Threading.Thread.Sleep(1000)
        Dim position As New AjaxLoadingPanelBackgroundPosition()
        position = AjaxLoadingPanelBackgroundPosition.Center
        RadAjaxLoadingPanel1.BackgroundTransparency = 25
        lblMessage.Text = ""

        Dim DsUPVL As DataSet
        Dim Is_Vendor As String
        Dim BUvalue As String
        Dim SQLSTRINGQuery As String

        If Trim(txtUserid.Text) <> "" Then
            SQLSTRINGQuery = "Select * from SDIX_USERS_TBL where ISA_EMPLOYEE_ID = '" & Trim(txtUserid.Text) & "'"
        Else
            SQLSTRINGQuery = "Select * from SDIX_USERS_TBL where ISA_EMPLOYEE_ID = '" & Trim(Session("USERID")) & "'"
        End If
        DsUPVL = ORDBData.GetAdapter(SQLSTRINGQuery)
        If DsUPVL.Tables(0).Rows.Count = 1 Then
            Is_Vendor = DsUPVL.Tables(0).Rows(0).Item("ISA_SDI_EMPLOYEE")
            BUvalue = DsUPVL.Tables(0).Rows(0).Item("BUSINESS_UNIT")
        End If

        Select Case e.Tab.Value
            Case "UDTL"
                Exit Select
            Case "UPVL"
                If Session("BUSUNIT") = "" Then
                    Session.RemoveAll()
                    Response.Redirect("default.aspx")
                End If

                Dim strBU As String
                Dim strMessage As New Alert
                Dim ssssf As String = Session("USERTYPE")
                If Session("V_ROLE_Type") = "SUPER" Then
                    If Is_Vendor = "V" Then
                        strBU = m_cUserGroup_Vendor
                    Else
                        strBU = GetBUbyGroup(BUvalue)
                    End If

                    If strBU = "" Then
                        RadMultiPage1.RenderSelectedPageOnly = True
                        RadMultiPage1.SelectedIndex = 0
                        tbStripUserDetails.Tabs(0).Selected = True
                        ScriptManager.RegisterStartupScript(Page, Me.GetType, Guid.NewGuid.ToString(), String.Format("alert('{0}');", "Error - No Business Unit Selected!"), True)
                        Exit Sub
                    End If
                Else
                    'strBU = GetBUbyGroup(txtGroupID.Text)
                    'strBU = GetBUbyGroup(drpBUnit.SelectedValue)
                    strBU = m_cUserGroup_Vendor
                End If

                If strBU = "0" Then
                    RadMultiPage1.RenderSelectedPageOnly = True
                    RadMultiPage1.SelectedIndex = 0
                    tbStripUserDetails.Tabs(0).Selected = True
                    ScriptManager.RegisterStartupScript(Page, Me.GetType, Guid.NewGuid.ToString(), String.Format("alert('{0}');", "Error - Invalid BU - check productview id's!"), True)
                    Exit Sub
                End If

                Dim sDisplayedSDICust As String = ""
                Dim sDisplayedUserType As String = ""
                'GetDisplayedUserType(sDisplayedSDICust, sDisplayedUserType)

                sDisplayedSDICust = DsUPVL.Tables(0).Rows(0).Item("ISA_SDI_EMPLOYEE")
                sDisplayedUserType = DsUPVL.Tables(0).Rows(0).Item("ISA_EMPLOYEE_ACTYP")


                If checkUserid() Then
                    LoadUserprivilegesData(strBU, sDisplayedSDICust, sDisplayedUserType)
                Else
                    RadMultiPage1.RenderSelectedPageOnly = True
                    RadMultiPage1.SelectedIndex = 0
                    tbStripUserDetails.Tabs(0).Selected = True
                    If Page_Action = "EDIT" Then
                        ScriptManager.RegisterStartupScript(Page, Me.GetType, Guid.NewGuid.ToString(), String.Format("alert('{0}');", "Please select a user in User Detail before editing privileges!"), True)
                    Else
                        ScriptManager.RegisterStartupScript(Page, Me.GetType, Guid.NewGuid.ToString(), String.Format("alert('{0}');", "Please save User Detail data before editing privileges!"), True)
                    End If
                    Exit Sub
                End If

                lblMessage1N.Text = ""
                Label1.Text = ""
                Exit Select

        End Select
    End Sub

    Private Sub btnTangoAddUser_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnTangoAddUser.Click
        AddTangoUser(Session("USERID"), Session("BUSUNIT"), txtTangoUserName, txtTangoPassword, lblTangoPassword, lblValidation, _
                     lblTangoUserNameStored, lblSDiTrackDateTime, lblSDiTrackDateTimeVal, lblSDiTrackGuid, lblSDiTrackGuidVal, _
                     btnTangoAddUser)
    End Sub

#Region "Approvals"
    Private Sub LoadApprovals(ByVal userID As String, ByVal userBU As String, ByVal userType As String)
        Const SESSION_SITE_CURRENCY As String = "__siteCurrency"
        Dim m_siteCurrency As sdiCurrency = Nothing

        Try
            Dim siteBU As String = ""
            Try
                siteBU = CStr(Session("BUSUNIT")).Trim.ToUpper
                If (siteBU Is Nothing) Then
                    siteBU = ""
                End If
            Catch ex As Exception
            End Try
            m_siteCurrency = Nothing
            If Page.IsPostBack Then
                ' retrieve from session var
                Try
                    m_siteCurrency = CType(Session(SESSION_SITE_CURRENCY), sdiCurrency)
                Catch ex As Exception
                End Try
            End If
            If (Not Page.IsPostBack) Or _
               (m_siteCurrency Is Nothing) Then
                m_siteCurrency = sdiMultiCurrency.getSiteCurrency(siteBU)
                Session(SESSION_SITE_CURRENCY) = m_siteCurrency
            End If

            Me.lblSiteBaseCurrencyCode.Text = ""
            Try
                Me.lblSiteBaseCurrencyCode.Text = m_siteCurrency.Id
            Catch ex As Exception
            End Try
            getApprovals(userID, userBU)
        Catch ex As Exception

        End Try
    End Sub

    Private Sub getApprovals(ByVal strUserid, ByVal strBU)
        Dim strSQLstring As String
        Dim strAppEmpID As String

        strSQLstring = "SELECT ISA_IOL_APR_EMP_ID, ISA_IOL_APR_LIMIT, ISA_IOL_APR_ALT " & vbCrLf & _
                " FROM SDIX_USERS_APPRV" & vbCrLf & _
                " WHERE ISA_EMPLOYEE_ID = '" & strUserid & "'" & vbCrLf & _
                " AND BUSINESS_UNIT = '" & strBU & "'"

        Dim dtrAprReader As OleDbDataReader = ORDBData.GetReader(strSQLstring)

        If dtrAprReader.Read Then
            txtAppExist.Text = "UPD"
            strAppEmpID = dtrAprReader.Item("ISA_IOL_APR_EMP_ID")
            txtAppTotal.Text = dtrAprReader.Item("ISA_IOL_APR_LIMIT")
            m_sAppTotalOrig = txtAppTotal.Text
            m_sAppEmpIDOrig = strAppEmpID
            m_sAppAltOrig = dtrAprReader.Item("ISA_IOL_APR_ALT")
        Else
            txtAppExist.Text = "ADD"
            m_sAppTotalOrig = ""
            m_sAppEmpIDOrig = ""
            m_sAppAltOrig = ""
        End If
        dtrAprReader.Close()

        Session("APPR_TOTAL") = m_sAppTotalOrig
        Session("APPR_APR_EMPID") = m_sAppEmpIDOrig
        Session("APPR_APR_ALT") = m_sAppAltOrig

       
        strSQLstring = "SELECT Distinct (A.ISA_EMPLOYEE_NAME || ' - ' || A.ISA_EMPLOYEE_ID) as EMP_TEXT,A.ISA_EMPLOYEE_ID FROM SDIX_USERS_TBL A JOIN SDIX_MULTI_SITE B" & vbCrLf & _
                        " ON A.ISA_EMPLOYEE_ID=B.ISA_EMPLOYEE_ID WHERE B.BUSINESS_UNIT='" & strBU & "' AND A.ISA_SDI_EMPLOYEE = 'C' AND " & vbCrLf & _
                    "NOT A.ISA_EMPLOYEE_ID = '" & strUserid & "' AND A.ACTIVE_STATUS = 'A' " & vbCrLf & _
                    "UNION SELECT (A.ISA_EMPLOYEE_NAME || ' - ' || A.ISA_EMPLOYEE_ID) as EMP_TEXT,A.ISA_EMPLOYEE_ID FROM SDIX_USERS_TBL A WHERE " & vbCrLf & _
                    "A.BUSINESS_UNIT='" & strBU & "' AND A.ISA_SDI_EMPLOYEE = 'C' AND NOT A.ISA_EMPLOYEE_ID = '" & strUserid & "' AND A.ACTIVE_STATUS = 'A' ORDER BY EMP_TEXT"

        Dim dtrEMPReader As OleDbDataReader = ORDBData.GetReader(strSQLstring)
        DropAppEmpID.DataSource = dtrEMPReader
        DropAppEmpID.DataValueField = "ISA_EMPLOYEE_ID"
        DropAppEmpID.DataTextField = "EMP_TEXT"
        DropAppEmpID.DataBind()
        DropAppEmpID.Items.Insert(0, New ListItem("-- ALL --"))
        If Not DropAppEmpID.Items.FindByValue(strAppEmpID) Is Nothing Then
            DropAppEmpID.Items.FindByValue(strAppEmpID).Selected = True
        End If

        dtrEMPReader.Close()

    End Sub

    Sub deleteAPPRVRecord()
        Dim rowsaffected As Integer = 0
        Dim strBU As String = ""
        If Session("USERTYPE") = "SUPER" Then
            strBU = GetBUbyGroup(rcbGroup.Items(rcbGroup.SelectedIndex).Value)
        Else
            strBU = GetBUbyGroup(txtGroupID.Text)
        End If
        Dim strSQLstring As String = ""
        strSQLstring = "DELETE FROM SDIX_USERS_APPRV" & vbCrLf & _
                    " WHERE ISA_EMPLOYEE_ID = '" & txtUserid.Text & "'" & vbCrLf & _
                    " AND BUSINESS_UNIT = '" & strBU & "'"

        rowsaffected = ORDBData.ExecNonQueryWithTransaction(strSQLstring)

        If rowsaffected > 0 Then
            clsSDIAudit.AddRecord("profile.aspx", "Delete Order Limit Record", "SDIX_USERS_APPRV", Session("USERID").ToString, strBU, txtUserid.Text, _
                      sUDF1:="Limit " & m_sAppTotalOrig, sUDF2:="Approver " & m_sAppEmpIDOrig, sUDF3:="AltApprover " & m_sAppAltOrig)
            m_sAppTotalOrig = ""
            m_sAppEmpIDOrig = ""
            m_sAppAltOrig = ""
            Session("APPR_TOTAL") = m_sAppTotalOrig
            Session("APPR_APR_EMPID") = m_sAppEmpIDOrig
            Session("APPR_APR_ALT") = m_sAppAltOrig
        End If

    End Sub

    Private Sub updateAPPRVTable()
        Dim strBU As String

        If Session("USERTYPE") = "SUPER" Then
            strBU = GetBUbyGroup(rcbGroup.Items(rcbGroup.SelectedIndex).Value)
        Else
            strBU = GetBUbyGroup(txtGroupID.Text)
        End If

        Dim strSQLstring As String
        Dim bUpdate As Boolean = (txtAppExist.Text = "UPD")

        If Not bUpdate Then
            If ExistsApprvRecord(strBU) Then
                ' Verify that the record doesn't already exist if we're to insert the record.
                ' If the record already exists, change the "insert" action to an "update" action.
                bUpdate = True
            End If
        End If

        If bUpdate Then
            strSQLstring = "UPDATE SDIX_USERS_APPRV" & vbCrLf & _
                " SET ISA_IOL_APR_EMP_ID = '" & DropAppEmpID.SelectedValue & "'," & vbCrLf & _
                " ISA_IOL_APR_ALT = '" & DropAppEmpID.SelectedValue & "'," & vbCrLf & _
                " ISA_IOL_APR_LIMIT = " & Convert.ToDecimal(txtAppTotal.Text) & "," & vbCrLf & _
                " LASTUPDOPRID = '" & Session("USERID") & "'," & vbCrLf & _
                " LASTUPDDTTM = TO_DATE('" & Now().ToString() & "', 'MM/DD/YYYY HH:MI:SS AM')" & vbCrLf & _
                " WHERE ISA_EMPLOYEE_ID = '" & txtUserid.Text & "'" & vbCrLf & _
                " AND BUSINESS_UNIT = '" & strBU & "'"

        Else
            strSQLstring = "INSERT INTO SDIX_USERS_APPRV" & vbCrLf & _
                " (ISA_EMPLOYEE_ID," & vbCrLf & _
                " BUSINESS_UNIT," & vbCrLf & _
                " ISA_IOL_APR_EMP_ID," & vbCrLf & _
                " ISA_IOL_APR_LIMIT," & vbCrLf & _
                " ISA_IOL_APR_ALT," & vbCrLf & _
                " LASTUPDOPRID," & vbCrLf & _
                " LASTUPDDTTM)" & vbCrLf & _
                " VALUES('" & txtUserid.Text & "'," & vbCrLf & _
                " '" & strBU & "'," & vbCrLf & _
                " '" & DropAppEmpID.SelectedValue & "'," & vbCrLf & _
                " " & Convert.ToDecimal(txtAppTotal.Text) & "," & vbCrLf & _
                " '" & DropAppEmpID.SelectedValue & "'," & vbCrLf & _
                " '" & Session("USERID") & "'," & vbCrLf & _
                " TO_DATE('" & Now().ToString() & "', 'MM/DD/YYYY HH:MI:SS AM'))"
        End If

        Dim rowsaffected As Integer
        rowsaffected = ORDBData.ExecNonQuery(strSQLstring)

        If rowsaffected > 0 Then
            If bUpdate Then
                Dim decOrigTotal As Decimal = 0
                Dim decNewTotal As Decimal = 0
                Try
                    decOrigTotal = CType(m_sAppTotalOrig, Decimal)
                Catch ex As Exception
                    decOrigTotal = 0
                End Try
                Try
                    decNewTotal = CType(txtAppTotal.Text.ToString, Decimal)
                Catch ex As Exception
                    decNewTotal = 0
                End Try
                If decOrigTotal <> decNewTotal Then
                    clsSDIAudit.AddRecord("profile.aspx", "Update Order Limit Record", "SDIX_USERS_APPRV", Session("USERID").ToString, strBU, _
                                          txtUserid.Text, sColumnChg:="isa_iol_apr_limit", sOldValue:=m_sAppTotalOrig, sNewValue:=txtAppTotal.Text.ToString)
                    m_sAppTotalOrig = txtAppTotal.Text
                    Session("APPR_TOTAL") = m_sAppTotalOrig
                End If
                If m_sAppEmpIDOrig <> DropAppEmpID.SelectedValue Then
                    clsSDIAudit.AddRecord("profile.aspx", "Update Order Limit Record", "SDIX_USERS_APPRV", Session("USERID").ToString, strBU, _
                                          txtUserid.Text, sColumnChg:="isa_iol_apr_emp_id", sOldValue:=m_sAppEmpIDOrig, sNewValue:=DropAppEmpID.SelectedValue)
                    m_sAppEmpIDOrig = DropAppEmpID.SelectedValue
                    Session("APPR_APR_EMPID") = m_sAppEmpIDOrig
                End If
                If m_sAppAltOrig <> DropAppEmpID.SelectedValue Then
                    clsSDIAudit.AddRecord("profile.aspx", "Update Order Limit Record", "SDIX_USERS_APPRV", Session("USERID").ToString, strBU, _
                                          txtUserid.Text, sColumnChg:="isa_iol_apr_alt", sOldValue:=m_sAppAltOrig, sNewValue:=DropAppEmpID.SelectedValue)
                    m_sAppAltOrig = DropAppEmpID.SelectedValue
                    Session("APPR_APR_ALT") = m_sAppAltOrig
                End If
            Else
                clsSDIAudit.AddRecord("profile.aspx", "Insert Order Limit Record", "SDIX_USERS_APPRV", Session("USERID").ToString, strBU, _
                                      txtUserid.Text, sUDF1:="Limit " & txtAppTotal.Text.ToString, sUDF2:="Approver " & DropAppEmpID.SelectedValue)
                m_sAppTotalOrig = txtAppTotal.Text
                m_sAppEmpIDOrig = DropAppEmpID.SelectedValue
                m_sAppAltOrig = DropAppEmpID.SelectedValue
                Session("APPR_TOTAL") = m_sAppTotalOrig
                Session("APPR_APR_EMPID") = m_sAppEmpIDOrig
                Session("APPR_APR_ALT") = m_sAppAltOrig
            End If
        End If
    End Sub

    Private Sub btnSubmit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSubmit.Click
        If Session("USERTYPE") = "ADMIN" Or _
            Session("USERTYPE") = "ADMINX" Or _
            Session("USERTYPE") = "ADMINA" Or _
            Session("USERTYPE") = "SUPER" Then
            If DropAppEmpID.SelectedIndex = 0 Then
                lblMsg.Text = "A valid approval name must be selected"
                Exit Sub
            Else
                lblMsg.Text = ""
            End If
            If txtAppTotal.Text = "" Then
                txtAppTotal.Text = "0"
            End If
            If chbDelete.Checked Then
                deleteAPPRVRecord()
                chbDelete.Checked = False
                txtAppTotal.Text = ""
                DropAppEmpID.SelectedIndex = 0
            Else
                updateAPPRVTable()
            End If
        End If
    End Sub
#End Region

#Region "Order Status Emails"
    Private Sub LoadOrderStatusEmail(ByVal userType As String, ByVal userBU As String, ByVal userID As String)
        Try
            'Dim objEnterprise As New clsEnterprise(userBU)
            If userType = "SUPER" Then
                lblSavedEml.Visible = True
                chbSaved.Visible = True
                lblSubEml.Visible = True
                chbSubmitted.Visible = True
                chbProcOrd.Visible = True
                lblProcessing.Visible = True
                chbOrdered.Visible = True
                lblOrdered.Visible = True
                chbPicking.Visible = True
                lblPicking.Visible = True
                chbParPicked.Visible = True
                lblPartialPick.Visible = True
                chbShipped.Visible = True
                chbShipped.Visible = True
                chbPickedOrder.Visible = True
                chbShipped.Visible = True
                lblShipped.Visible = True
                chbWaitBudApp.Visible = False
                lblWbudgetApp.Visible = False
                chError.Visible = True
                lblError.Visible = True

                chbcancelled.Visible = True
                lblCancelled.Visible = True
                chbWaitingQuote.Visible = True
                lblWaitingQuote.Visible = True
                chbWaitingOrdApp.Visible = True
                lblOrdApprv.Visible = True
                chbMaterialReturn.Visible = True
                chbRecvdPo.Visible = True

                lblPODueDateChange.Visible = True
                chbPODueDateChange.Visible = True
            End If

            chbSaved.Enabled = True
            chbSubmitted.Enabled = True
            chbProcOrd.Enabled = True
            chbOrdered.Enabled = True
            chbPicking.Enabled = True
            chbParPicked.Enabled = True
            chbShipped.Enabled = True
            chbPickedOrder.Enabled = True
            chbWaitBudApp.Enabled = True
            chbcancelled.Enabled = True
            chError.Enabled = True
            chbWaitingQuote.Enabled = True
            chbWaitingOrdApp.Enabled = True
            chbPODueDateChange.Enabled = True
            chbMaterialReturn.Enabled = True

            getPrivleges(userID, userBU)
        Catch ex As Exception

        End Try
    End Sub

    Private Sub execPrivsSQL(ByVal strSQLstring As String, Optional ByVal strUpdType As String = "", _
            Optional ByVal strOpValue As String = "", Optional ByVal strOpName As String = "")

        Dim rowsaffected As Integer = 0
        If Trim(strUpdType) <> "" Then
            If UCase(Trim(strUpdType)) = "INS" Then
                Try
                    rowsaffected = ORDBData.ExecNonQuery(strSQLstring, False, False)
                Catch ex As Exception
                    rowsaffected = 0
                End Try
                If rowsaffected = 0 Then
                    Try
                        If Trim(strOpValue) <> "" And Trim(strOpName) <> "" Then
                            strSQLstring = getSQLprivupdate(strOpName, "IOL", strOpValue, "UPD")
                            rowsaffected = ORDBData.ExecNonQuery(strSQLstring, False)

                        End If

                    Catch exUI As Exception

                    End Try

                End If
            End If
        Else
            Try
                rowsaffected = ORDBData.ExecNonQuery(strSQLstring, False)
            Catch exU As Exception

            End Try

        End If
    End Sub

    Private Sub getPrivleges(ByVal strUserid, ByVal strbu)

        lblUpdMsg.Text = ""
        Dim strItem As String
        Dim hashPrivs As Hashtable
        hashPrivs = New Hashtable
        Dim roleHashPrivs As Hashtable = Nothing

        hashPrivs = getprivhashtable(strUserid, strbu, "N", roleHashPrivs)

        If hashPrivs.ContainsKey("NONE") Then
            chbSaved.Checked = False
            chbSubmitted.Checked = False
            chbOrdered.Checked = False
            chbPicking.Checked = False
            chbProcOrd.Checked = False
            chbParPicked.Checked = False
            chbPickedOrder.Checked = False
            chbShipped.Checked = False
            chbWaitBudApp.Checked = False
            chError.Checked = False
            chbcancelled.Checked = False
            chbWaitingQuote.Checked = False
            chbWaitingOrdApp.Checked = False
            chbMaterialReturn.Checked = False
            chbRecvdPo.Checked = True
            chbPODueDateChange.Checked = False
            Exit Sub
        End If
        ' ORDER STATUS CODES that are used in PS_ISAORDSTATLOG table
        ' to get the status codes from the variable below:
        ' in the query in program StatusChaneEmail
        ' need to do a substr(ISA_IOL_OP_NAME 0,10)  10th byte is the status code 
        ' saved - EMLSAVED-0   status code = 0
        '0       Saved 
        '1       Submitted 
        '2       Processing Order 
        '3       Ordered 
        '4       Picking 
        '5       Partially Shipped 
        '6       Shipped 
        '7       Picked Order 
        'B       Waiting Budget Approval
        'C       Cancelled 
        'E       Error
        'Q       Waiting Quote
        'W       Waiting Order Approval


        'If hashPrivs.ContainsValue("SUP") Then
        '    resetIOLCheckboxes()
        'Else
        For Each strItem In hashPrivs.Keys
            Select Case strItem
                Case "EMLSAVED-0"
                    chbSaved.Checked = True
                Case "EMLSUBMIT1"
                    chbSubmitted.Checked = True
                Case "EMLPROCES2"
                    chbProcOrd.Checked = True
                Case "EMLORDERD3"
                    chbOrdered.Checked = True
                Case "EMLPICKNG4"
                    chbPicking.Checked = True
                Case "EMLPARPIC5"
                    chbParPicked.Checked = True
                Case "EMLSHIPPD6"
                    chbShipped.Checked = True
                Case "EMLPICKED7"
                    chbPickedOrder.Checked = True
                Case "EMLWAITBDB"
                    chbWaitBudApp.Checked = False
                Case "EMLCANCELC"
                    chbcancelled.Checked = True
                Case "EMLERROR-E"
                    chError.Checked = True
                Case "EMLWAITNGQ"
                    chbWaitingQuote.Checked = True
                Case "EMLWAITAPW"
                    chbWaitingOrdApp.Checked = True
                Case "EMLPODUEDT"
                    chbPODueDateChange.Checked = True
                Case "EMLMATRETR"
                    chbMaterialReturn.Checked = True

            End Select
        Next
        If clsAccessPrivileges.IsPrivilgEqualsN(strUserid, strbu, _
                            clsAccessPrivileges.UserPrivsEnum.SendEmailRecvdPo) Then  'Case "EMLRECVD"
            chbRecvdPo.Checked = False
        Else
            chbRecvdPo.Checked = True
        End If

        If IsPrivilegeOn(strUserid, strbu, UserPrivsEnum.IncidentAssign) Then
            txtCustSrvFlag.Text = "Y"
        Else
            Dim objUserTbl As New clsUserTbl(strUserid, strbu)
            txtCustSrvFlag.Text = objUserTbl.CustSrvFlag
        End If

        If Not roleHashPrivs Is Nothing Then
            For Each strItem In roleHashPrivs.Keys
                Select Case strItem
                    Case "EMLSAVED-0"
                        chbSaved.Enabled = False
                    Case "EMLSUBMIT1"
                        chbSubmitted.Enabled = False
                    Case "EMLPROCES2"
                        chbProcOrd.Enabled = False
                    Case "EMLORDERD3"
                        chbOrdered.Enabled = False
                    Case "EMLPICKNG4"
                        chbPicking.Enabled = False
                    Case "EMLPARPIC5"
                        chbParPicked.Enabled = False
                    Case "EMLSHIPPD6"
                        chbShipped.Enabled = False
                    Case "EMLPICKED7"
                        chbPickedOrder.Enabled = False
                    Case "EMLWAITBDB"
                        chbWaitBudApp.Enabled = False
                    Case "EMLCANCELC"
                        chbcancelled.Enabled = False
                    Case "EMLERROR-E"
                        chError.Enabled = False
                    Case "EMLWAITNGQ"
                        chbWaitingQuote.Enabled = False
                    Case "EMLWAITAPW"
                        chbWaitingOrdApp.Enabled = False
                    Case "EMLPODUEDT"
                        chbPODueDateChange.Enabled = False
                    Case "EMLMATRETR"
                        chbMaterialReturn.Enabled = False

                End Select
            Next  ' For Each strItem In roleHashPrivs.Keys
            lblOrdStatusEml.Text = UCase(strUserid) & " is assigned a Role."
        End If ' If Not roleHashPrivs Is Nothing Then

    End Sub

    Function getSQLprivupdate(ByVal strOpName, ByVal strOpType, ByVal strOpValue, ByVal strUpdType) As String

        Dim strBU As String
        If Session("USERTYPE") = "SUPER" Then
            strBU = GetBUbyGroup(rcbGroup.Items(rcbGroup.SelectedIndex).Value)
        Else
            strBU = GetBUbyGroup(txtGroupID.Text)
        End If

        If strUpdType = "UPD" Then
            getSQLprivupdate = "UPDATE SDIX_USERS_PRIVS" & vbCrLf & _
                " SET ISA_IOL_OP_VALUE = '" & strOpValue & "'," & vbCrLf & _
                " LASTUPDOPRID = '" & Session("USERID") & "'," & vbCrLf & _
                " LASTUPDDTTM = TO_DATE('" & Now().ToString() & "', 'MM/DD/YYYY HH:MI:SS AM')" & vbCrLf & _
                " WHERE ISA_EMPLOYEE_ID = '" & txtUserid.Text.ToUpper & "'" & vbCrLf & _
                " AND BUSINESS_UNIT = '" & strBU.ToUpper & "'" & vbCrLf & _
                " AND ISA_IOL_OP_NAME = '" & strOpName & "'"
        Else
            getSQLprivupdate = "INSERT INTO SDIX_USERS_PRIVS" & vbCrLf & _
                " (ISA_EMPLOYEE_ID," & vbCrLf & _
                " BUSINESS_UNIT," & vbCrLf & _
                " ISA_IOL_OP_NAME," & vbCrLf & _
                " ISA_IOL_OP_VALUE," & vbCrLf & _
                " ISA_IOL_OP_TYPE," & vbCrLf & _
                " LASTUPDOPRID," & vbCrLf & _
                " LASTUPDDTTM)" & vbCrLf & _
                " VALUES('" & txtUserid.Text.ToUpper & "'," & vbCrLf & _
                " '" & strBU & "'," & vbCrLf & _
                " '" & strOpName & "'," & vbCrLf & _
                " '" & strOpValue & "'," & vbCrLf & _
                " '" & strOpType & "'," & vbCrLf & _
                " '" & Session("USERID") & "'," & vbCrLf & _
                " TO_DATE('" & Now().ToString() & "', 'MM/DD/YYYY HH:MI:SS AM'))"
        End If
    End Function

    Sub resetIOLCheckboxes()
        chbSaved.Checked = False
        chbSubmitted.Checked = False
        chbOrdered.Checked = False
        chbProcOrd.Checked = False
        chbPicking.Checked = False
        chbParPicked.Checked = False
        chbPickedOrder.Checked = False
        chbShipped.Checked = False
        chbWaitBudApp.Checked = False
        chError.Checked = False
        chbcancelled.Checked = False
        chbWaitingQuote.Checked = False
        chbWaitingOrdApp.Checked = False
        chbMaterialReturn.Checked = False
        chbPODueDateChange.Checked = False
        chbRecvdPo.Checked = True

    End Sub

    Private Sub chbWaitBudApp_CheckedChanged(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles chbWaitBudApp.CheckedChanged

    End Sub

    Private Sub btnOrdStatEmailSubmit_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnOrdStatEmailSubmit.Click
        updatePrivsTable()
    End Sub

    Sub updatePrivsTable()
        Dim strOpValue As String
        Dim strPrivSQL As String

        Dim strBU As String
        If Session("USERTYPE") = "SUPER" Then
            strBU = GetBUbyGroup(rcbGroup.Items(rcbGroup.SelectedIndex).Value)
        Else
            strBU = GetBUbyGroup(txtGroupID.Text)
        End If

        Dim hashPrivs As Hashtable
        hashPrivs = New Hashtable
        hashPrivs = getprivhashtable(txtUserid.Text, strBU, "N")

        'If hashPrivs.ContainsKey("VIEWEXPD") Then
        '    strPrivSQL = getSQLprivupdate("VIEWEXPD", "IOL", strOpValue, "UPD")
        '    execPrivsSQL(strPrivSQL)
        'Else
        '    If rblExpedite.Items(0).Selected = True Then
        '        strPrivSQL = getSQLprivupdate("VIEWEXPD", "IOL", strOpValue, "INS")
        '        execPrivsSQL(strPrivSQL)
        '    End If
        'End If

        ''Check box list - allow item updates
        'If rblExpedite.Items(1).Selected = True Then
        '    strOpValue = "Y"
        'Else
        '    strOpValue = "N"
        'End If
        'If hashPrivs.ContainsKey("UPDEXPD") Then
        '    strPrivSQL = getSQLprivupdate("UPDEXPD", "IOL", strOpValue, "UPD")
        '    execPrivsSQL(strPrivSQL)
        'Else
        '    If rblExpedite.Items(1).Selected = True Then
        '        strPrivSQL = getSQLprivupdate("UPDEXPD", "IOL", strOpValue, "INS")
        '        execPrivsSQL(strPrivSQL)
        '    End If
        'End If

        'Check box - allow item adds
        '0 allow email for saved orders
        'Dim ted As String = "EMLSAVED-0"
        'ted = ted.Substring(9)
        If chbSaved.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLSAVED-0") Then
            strPrivSQL = getSQLprivupdate("EMLSAVED-0", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbSaved.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLSAVED-0", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLSAVED-0")
            End If
        End If

        '1 Check box - allow emails for submitted orders
        If chbSubmitted.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLSUBMIT1") Then
            strPrivSQL = getSQLprivupdate("EMLSUBMIT1", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbSubmitted.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLSUBMIT1", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLSUBMIT1")
            End If
        End If

        '3 Check box - allow emails for an Order
        If chbOrdered.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLORDERD3") Then
            strPrivSQL = getSQLprivupdate("EMLORDERD3", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbOrdered.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLORDERD3", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLORDERD3")
            End If
        End If

        '4 Check box - allow emails for status Picking
        If chbPicking.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLPICKNG4") Then
            strPrivSQL = getSQLprivupdate("EMLPICKNG4", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbPicking.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLPICKNG4", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLPICKNG4")
            End If
        End If

        '5 Check box - allow emails for partially picked orders
        If chbParPicked.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLPARPIC5") Then
            strPrivSQL = getSQLprivupdate("EMLPARPIC5", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbParPicked.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLPARPIC5", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLPARPIC5")
            End If
        End If

        '7 Check box - allow emails for picked orders
        If chbPickedOrder.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLPICKED7") Then
            strPrivSQL = getSQLprivupdate("EMLPICKED7", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbPickedOrder.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLPICKED7", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLPICKED7")
            End If
        End If

        '6 Check box - allow emails that shipped
        If chbShipped.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLSHIPPD6") Then
            strPrivSQL = getSQLprivupdate("EMLSHIPPD6", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbShipped.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLSHIPPD6", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLSHIPPD6")
            End If
        End If

        'B Check box - emails for waiting for budget approval
        If chbWaitBudApp.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLWAITBDB") Then
            strPrivSQL = getSQLprivupdate("EMLWAITBDB", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbWaitBudApp.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLWAITBDB", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLWAITBDB")
            End If
        End If

        'E Check box - allow emails for order status errors
        If chError.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLERROR-E") Then
            strPrivSQL = getSQLprivupdate("EMLERROR-E", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chError.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLERROR-E", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLERROR-E")
            End If
        End If

        'C Check box - allow emails for cancelled orders
        If chbcancelled.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLCANCELC") Then
            strPrivSQL = getSQLprivupdate("EMLCANCELC", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbcancelled.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLCANCELC", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLCANCELC")
            End If
        End If

        'Q Check box - allow view of STK Issue report
        If chbWaitingQuote.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLWAITNGQ") Then
            strPrivSQL = getSQLprivupdate("EMLWAITNGQ", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbWaitingQuote.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLWAITNGQ", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLWAITNGQ")
            End If
        End If

        'W Check box - allow emails for waiting order approval
        If chbWaitingOrdApp.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLWAITAPW") Then
            strPrivSQL = getSQLprivupdate("EMLWAITAPW", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbWaitingOrdApp.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLWAITAPW", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLWAITAPW")
            End If
        End If
        'R Check box - allow emails for Material Return
        If chbMaterialReturn.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLMATRETR") Then
            strPrivSQL = getSQLprivupdate("EMLMATRETR", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbMaterialReturn.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLMATRETR", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLMATRETR")
            End If
        End If

        'Check box - allow emails for Received POs
        If chbRecvdPo.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLRECVD") Then
            strPrivSQL = getSQLprivupdate("EMLRECVD", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else

            strPrivSQL = getSQLprivupdate("EMLRECVD", "IOL", strOpValue, "INS")
            execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLRECVD")

        End If

        '2 Check box - allow emails for processing order
        If chbProcOrd.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLPROCES2") Then
            strPrivSQL = getSQLprivupdate("EMLPROCES2", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbProcOrd.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLPROCES2", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLPROCES2")
            End If
        End If

        ' turn ON/OFF emails for PO due date change
        If chbPODueDateChange.Checked = True Then
            strOpValue = "Y"
        Else
            strOpValue = "N"
        End If
        If hashPrivs.ContainsKey("EMLPODUEDT") Then
            strPrivSQL = getSQLprivupdate("EMLPODUEDT", "IOL", strOpValue, "UPD")
            execPrivsSQL(strPrivSQL)
        Else
            If chbPODueDateChange.Checked = True Then
                strPrivSQL = getSQLprivupdate("EMLPODUEDT", "IOL", strOpValue, "INS")
                execPrivsSQL(strPrivSQL, "INS", strOpValue, "EMLPODUEDT")
            End If
        End If

        lblUpdMsg.Text = "Database has been updated..."

    End Sub

#End Region

#Region "Privileges"
    Private Sub LoadUserprivilegesData(ByVal displayedBU As String, ByVal sDisplayedSDICust As String, ByVal sDisplayedUserType As String)
        Try
            Dim strBU As String
            ViewState("BU") = ""
            If IsVendor() Or IsMexicoVendor() Or sDisplayedSDICust = "V" Then
                rcbGroupTab2.Visible = False
                txtVendorUserGroup.Visible = True
                txtVendorUserGroup.Text = displayedBU
                ViewState("BU") = drpBUnit.SelectedValue
            Else
                rcbGroupTab2.Visible = True
                txtVendorUserGroup.Visible = False
                buildGroupList(rcbGroupTab2)
                rcbGroupTab2.Items.FindItemByValue(displayedBU).Selected = True
                ViewState("BU") = displayedBU
            End If
            lblUserVal.Text = txtUserid.Text
            ' If the user can change to the privileges tab, it's not a "USER"; it's a "SUPER" or "ADMIN"
            ' who is editing privileges for themselves or for a USER. In that case, load the tree
            ' for the user who is editing the privileges.
            Dim sDisplayedUserID As String = GetDisplayedUserID()
            Dim sDisplayedSDIEmp As String = ConvertSDICustToSDIEmp(sDisplayedSDICust)
            Dim sPortal As String = GetPortal(sDisplayedSDICust)
            'LoadProgramData(sPortal, Session("USERTYPE").ToString, sDisplayedUserID, sDisplayedUserType, sDisplayedSDIEmp)
            LoadProgramData(sPortal, Convert.ToString(Session("V_ROLE_Type")), sDisplayedUserID, sDisplayedUserType, sDisplayedSDIEmp)
            LoadRoleMaster(sPortal)
            GetUserAccessType()
        Catch ex As Exception

        End Try
    End Sub

    Private Sub LoadProgramData(ByVal sPortal As String, ByVal sEditorsUserType As String, ByVal sEditeesUserID As String, ByVal sEditeesUserType As String, ByVal sEditeesSDIEmp As String)
        Dim dsProgramData As DataSet
        Try
            Dim eAccessGroup As clsProgramMaster.AccessGroupEnum = clsProgramMaster.AccessGroupEnum.MostRestricted
            If sEditorsUserType.ToLower.Equals("admin") Then
                eAccessGroup = clsProgramMaster.AccessGroupEnum.Admin
            ElseIf sEditorsUserType.ToLower.Equals("super") Then
                eAccessGroup = clsProgramMaster.AccessGroupEnum.Super
            End If
            dsProgramData = clsProgramMaster.GetPrograms(sPortal, sEditeesUserID, sEditeesUserType, sEditeesSDIEmp, eAccessGroup)

            If dsProgramData IsNot Nothing Then
                If dsProgramData.Tables(0).Rows.Count > 0 Then
                    rtvPrograms.DataTextField = "PROGRAMNAME"
                    rtvPrograms.DataValueField = "SECURITYALIAS"
                    rtvPrograms.DataFieldID = "ISA_IDENTIFIER"
                    rtvPrograms.DataFieldParentID = "ISA_PARENT_IDENT"

                    For Each row As DataRow In dsProgramData.Tables(0).Rows
                        row.Item("programname") = row.Item("programname").ToString & " (" & row.Item("securityalias") & ")"
                        If row.Item("active").ToString() = clsProgramMaster.InactiveProgramCode.ToString Then
                            row.Item("programname") = row.Item("programname").ToString & " - inactive"
                        ElseIf row.Item("securityalias").ToString.Trim.Length = 0 Then
                            row.Item("programname") = row.Item("programname").ToString & " - program not available"
                        End If
                    Next
                    dsProgramData.AcceptChanges()

                    rtvPrograms.DataSource = dsProgramData
                    rtvPrograms.DataBind()
                    HideExpandCollapseButtons()
                End If
            End If
        Catch ex As Exception

        End Try
    End Sub

    Private Sub LoadRoleMaster(ByVal roleType As String)
        Dim dsRoleData As DataSet
        Try
            Dim strSQLstring As String
            Dim userType As String = Convert.ToString(Session("USERTYPE"))

            If userType.ToLower.Equals("admin") Then
                strSQLstring = "Select ROLENUM, ROLENAME, BUSINESS_UNIT From SDIX_USRROLE_TBL WHERE ROLETYPE = '" + roleType + "'" & vbCrLf & _
                    "AND ROLENUM NOT IN (SELECT ROLENUM FROM SDIX_ROLEDETAIL WHERE ALIAS_NAME IN (" & vbCrLf & _
                    "SELECT SECURITYALIAS FROM SDIX_PRGRMMASTER WHERE ACCESS_GROUP = 'SUPER'))" & vbCrLf
            Else
                strSQLstring = "Select ROLENUM, ROLENAME, BUSINESS_UNIT From SDIX_USRROLE_TBL WHERE ROLETYPE = '" + roleType + "'"
            End If
            dsRoleData = ORDBData.GetAdapter(strSQLstring)
            ddlUserRole.DataSource = dsRoleData
            ddlUserRole.DataTextField = "ROLENAME"
            ddlUserRole.DataValueField = "ROLENUM"
            ddlUserRole.DataBind()
        Catch ex As Exception

        End Try

    End Sub

    Private Sub GetRoleData(ByVal id As String)
        Dim dsRolePrograms As DataSet
        Try
            rtvPrograms.ClearCheckedNodes()
            Dim strQuery As String = "select ALIAS_NAME from SDIX_ROLEDETAIL where ROLENUM = " + id
            dsRolePrograms = ORDBData.GetAdapter(strQuery)
            Dim roleRow As DataRow
            Dim navTreePrograms As IList(Of RadTreeNode) = rtvPrograms.GetAllNodes()
            ' loop through nav tree
            For Each navTreeNode As RadTreeNode In navTreePrograms
                ' loop thru role programs to find a match for the current nav tree program
                For Each roleRow In dsRolePrograms.Tables(0).Rows
                    Dim roleProgramAlias As String = roleRow("ALIAS_NAME")
                    If navTreeNode.Value = roleProgramAlias Then
                        navTreeNode.Checked = True
                        Exit For
                    End If
                Next
            Next

        Catch ex As Exception

        End Try
    End Sub


    Protected Sub rblType_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles rblType.SelectedIndexChanged
        Try
            If rblType.SelectedIndex = 1 Then  '  If rblType.SelectedItem.Value.ToLower().Equals("role") Then
                'Dim sPortal As String = GetPortal()
                'LoadRoleMaster(sPortal)
                ddlUserRole.Enabled = True
                GetRoleData(ddlUserRole.SelectedItem.Value)
            Else
                ddlUserRole.Enabled = False
                GetAlaCarteData()
            End If
        Catch ex As Exception

        End Try
    End Sub

    Protected Sub ddlUserRole_SelectedIndexChanged(ByVal sender As Object, ByVal e As EventArgs)
        Try
            GetRoleData(ddlUserRole.SelectedValue)
        Catch ex As Exception

        End Try
    End Sub

    Private Sub btnUserAccessSave_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnUserAccessSave.Click

        lblMessage1N.Text = ""
        Dim nodeCollection As IList(Of RadTreeNode) = rtvPrograms.CheckedNodes
        Try
            If rblType.SelectedIndex = 1 Then  '  If rblType.SelectedItem.Value.ToLower().Equals("role") Then

                SaveUserAccessRolePrivileges(txtUserid.Text, ViewState("BU"), ddlUserRole.SelectedItem.Value)

                Label1.Text = "User information has been modified and saved successfully."
                lblMessage1N.Text = Label1.Text
                Session("MenuUpdated") = True
            Else
                If nodeCollection.Count > 0 Then
                    SaveUserAccessPrivileges(txtUserid.Text, ViewState("BU"), nodeCollection)
                    Label1.Text = "User information has been modified and saved successfully."
                    lblMessage1N.Text = Label1.Text
                    Session("MenuUpdated") = True
                End If
            End If

            rcbGroup.Items.FindItemByValue(rcbGroup.SelectedItem.Value).Selected = True
        Catch ex As Exception
            lblMessage1N.Text = ""
        End Try
    End Sub

    Private Sub GetUserAccessType()
        Try
            'rblType.Items.FindByValue("Alacarte").Selected = True
            rblType.SelectedIndex = 0
            Dim userRoleID As Integer = GetUserAccessRole(txtUserid.Text, ViewState("BU"))
            If userRoleID <= 0 Then
                GetAlaCarteData()
                ddlUserRole.Enabled = False
            ElseIf userRoleID <> 0 And ddlUserRole.Enabled = False Then
                GetRoleData(userRoleID)
                ddlUserRole.Enabled = True
                'rblType.Items.FindByValue("Role").Selected = True
                rblType.SelectedIndex = 1
                ddlUserRole.Items.FindByValue(userRoleID).Selected = True
            Else
                GetRoleData(userRoleID)
                rblType.SelectedIndex = 1
                ddlUserRole.Items.FindByValue(userRoleID).Selected = True
            End If
        Catch ex As Exception

        End Try
    End Sub
#End Region

#Region "Preferences"
    Private Sub LoadPreferences()
        Try
            GetProdDispType()
            If Session("USERTYPE") = "SUPER" Then
                'lblBlockPrice.Visible = True
                chkbxDisplayPrice.Enabled = True
            Else
                'lblBlockPrice.Visible = False
                chkbxDisplayPrice.Enabled = False
            End If
        Catch ex As Exception

        End Try
    End Sub

    Private Sub GetProdDispType()

        Dim defaultShipTo As String = " "
        Dim strSQLstring As String
        Dim dsUserPreference As DataSet
        Dim strProdDisp As String = m_cProdDispType_CatalogSQL

        Dim strShitpTo As String = ""
        Dim strDept As String = ""

        strSQLstring = "SELECT ISA_PROD_DISPLAY, ISA_PRICE_BLOCK,ISA_SDI_EMPLOYEE,SHIPTO_DEFAULT,ISA_DEPT FROM SDIX_USERS_TBL" & vbCrLf & _
            " WHERE ISA_EMPLOYEE_ID = '" & Trim(txtUserid.Text).ToUpper & "'"
        Try
            'strProdDisp = ORDBData.GetScalar(strSQLstring)
            dsUserPreference = ORDBData.GetAdapter(strSQLstring)

            strSQLstring = "SELECT SHIP_TO_FLG FROM PS_ISA_ENTERPRISE WHERE ISA_BUSINESS_UNIT='" & rcbGroup.SelectedValue.Trim & "' "

            strShitpTo = ORDBData.GetScalar(strSQLstring)

            If Not dsUserPreference Is Nothing And dsUserPreference.Tables(0).Rows.Count > 0 Then
                Dim drPreference As DataRow = dsUserPreference.Tables(0).Rows(0)
                strProdDisp = Convert.ToString(drPreference("ISA_PROD_DISPLAY"))

                If Convert.ToString(drPreference("ISA_PRICE_BLOCK")).ToUpper().Equals("Y") Then
                    chkbxDisplayPrice.Checked = True
                Else
                    chkbxDisplayPrice.Checked = False
                End If
                'Load ship to location 
                If Convert.ToString(drPreference("ISA_SDI_EMPLOYEE")).ToUpper().Equals("C") Or strShitpTo = "Y" Then
                    defaultShipTo = Convert.ToString(drPreference("SHIPTO_DEFAULT"))
                    Try
                        Dim shiptoDs As DataSet = getShipToLoc(UCase(rcbGroup.SelectedValue))
                        If Not shiptoDs Is Nothing And shiptoDs.Tables(0).Rows.Count > 0 Then
                            lblShipto.Visible = True
                            dropShipto.Visible = True
                            dropShipto.DataSource = shiptoDs
                            dropShipto.DataValueField = "CUSTID"
                            dropShipto.DataTextField = "locname"
                            dropShipto.DataBind()
                            dropShipto.Items.Insert(0, "-- Select ShipTo --")
                            'Chaeck default location is available in user table or not.
                            If Not defaultShipTo = "" And Not defaultShipTo = Nothing Then
                                dropShipto.SelectedValue = defaultShipTo
                            End If
                        End If
                    Catch ex As Exception

                    End Try

                Else
                    lblShipto.Visible = False
                    dropShipto.Visible = False
                    If Not dropShipto.DataSource = Nothing Then
                        dropShipto.SelectedValue = 0
                    End If
                End If

                If Convert.ToString(drPreference("ISA_SDI_EMPLOYEE")).ToUpper().Equals("S") Then
                    strDept = Convert.ToString(drPreference("ISA_DEPT"))
                    Try
                        strSQLstring = "SELECT DEPT_ID,DEPT_NAME FROM SDIX_TCKT_DEPT"
                        Dim deptDs As DataSet = ORDBData.GetAdapter(strSQLstring)

                        If Not deptDs Is Nothing And deptDs.Tables(0).Rows.Count > 0 Then
                            lblUserDept.Visible = True
                            drpDept.Visible = True
                            drpDept.DataSource = deptDs
                            drpDept.DataValueField = "DEPT_ID"
                            drpDept.DataTextField = "DEPT_NAME"
                            drpDept.DataBind()
                            drpDept.Items.Insert(0, "-- Select Dept --")
                            If Not strDept = "" And Not strDept = Nothing Then
                                drpDept.SelectedValue = strDept
                            End If
                        End If

                    Catch ex As Exception

                    End Try
                Else
                    lblUserDept.Visible = False
                    drpDept.Visible = False
                    If Not drpDept.DataSource = Nothing Then
                        drpDept.SelectedValue = 0
                    End If

                End If

            End If
        Catch ex As Exception
            strProdDisp = m_cProdDispType_CatalogSQL
            chkbxDisplayPrice.Checked = False
        End Try
        If strProdDisp = m_cProdDispType_PSClient Then
            rrbProdDispPSClient.Checked = True
            rrbProdDispCatSQL.Checked = False
        Else
            rrbProdDispCatSQL.Checked = True
            rrbProdDispPSClient.Checked = False
        End If
    End Sub

    Private Sub btnSubmitPrefs_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnSubmitPrefs.Click
        UpdatePrefs()
    End Sub

    Private Sub UpdatePrefs()
        Try
            lblMessage.Text = ""
            Dim strSQLstring As String = ""
            Dim strProdDisplay As String = m_cProdDispType_CatalogSQL
            Dim strBlockPrice As String = ""
            Dim strShipTo As String = ""
            Dim strDept As String = ""
            Dim rowsaffected As Integer = 0

            If chkbxDisplayPrice.Checked Then
                strBlockPrice = "Y"
            End If

            If rrbProdDispPSClient.Checked Then
                strProdDisplay = m_cProdDispType_PSClient
            End If

            If Not dropShipto.SelectedValue = "-- Select ShipTo --" And dropShipto.SelectedIndex > 0 Then
                strShipTo = dropShipto.SelectedValue
            End If

            If Not drpDept.SelectedValue = "-- Select Dept --" And drpDept.SelectedIndex > 0 Then
                strDept = drpDept.SelectedValue
            End If

            strSQLstring = "UPDATE SDIX_USERS_TBL" & vbCrLf & _
                        " SET ISA_PROD_DISPLAY = '" & strProdDisplay & "'" & vbCrLf & _
                        ", ISA_PRICE_BLOCK = '" & strBlockPrice & "'" & vbCrLf & _
                        " , SHIPTO_DEFAULT='" & strShipTo & "'" & vbCrLf & _
                        " , ISA_DEPT ='" & strDept & "'" & vbCrLf & _
                        " WHERE ISA_EMPLOYEE_ID = '" & Trim(txtUserid.Text).ToUpper & "'"

            rowsaffected = ORDBData.ExecNonQuery(strSQLstring)
            If rowsaffected > 0 Then
                Session("ISAShipToID") = strShipTo
                lblMessage.Text = "User preference has been modified and saved successfully."
            End If

        Catch ex As Exception

        End Try
    End Sub
#End Region

#Region "TANGO"
    Private Sub SetUpTrackTab()
        Dim oSDITrack As New clsSDITrack()
        Try
            Dim sTrackAddedUserName As String
            Dim sTrackAddedUserDate As String
            Dim sTrackAddedUserGUID As String

            lblSDiTrackCurrUserVal.Text = Session("USERID").ToString

            If oSDITrack.IsAccountUser(sTrackAddedUserName, sTrackAddedUserDate, sTrackAddedUserGUID) Then
                txtTangoUserName.Text = sTrackAddedUserName
                txtTangoUserName.Visible = False
                lblTangoUserNameStored.Text = sTrackAddedUserName
                lblTangoUserNameStored.Visible = True
                txtTangoUserName.ReadOnly = True
                txtTangoPassword.Visible = False
                lblTangoPassword.Visible = False
                txtTangoPassword.ReadOnly = True
                lblSDiTrackDateTime.Visible = True
                lblSDiTrackDateTimeVal.Visible = True
                lblSDiTrackGuid.Visible = True
                lblSDiTrackGuidVal.Visible = True
                lblSDiTrackDateTimeVal.Text = sTrackAddedUserDate
                lblSDiTrackGuidVal.Text = sTrackAddedUserGUID
                btnTangoAddUser.Visible = False
            Else
                txtTangoUserName.ReadOnly = False
                txtTangoPassword.ReadOnly = False
                btnTangoAddUser.Visible = True
                lblSDiTrackDateTime.Visible = False
                lblSDiTrackDateTimeVal.Visible = False
                lblSDiTrackGuid.Visible = False
                lblSDiTrackGuidVal.Visible = False
            End If

            If Page_Action = "EDIT" Then
                ddlSDiUsers.Visible = True

                Dim dsORUsers As DataSet = GetSelectDropDownData()
                ddlSDiUsers.DataSource = dsORUsers
                ddlSDiUsers.DataValueField = "ISA_EMPLOYEE_ID"
                ddlSDiUsers.DataTextField = "USERANDBU" ' "ISA_USER_NAME"
                ddlSDiUsers.DataBind()

                ShowTrackData()
            End If

        Catch ex As Exception
            lblValidation.Text = "SDiTrack Issue"
        End Try
    End Sub
#End Region

#Region "MOBILITY"
    Private Sub LoadGRIBIDENTITY()
        Dim StrQuery As String = String.Empty
        Dim UserID As String = String.Empty
        lblGRIBErr.Text = ""
        Try
            UserID = Trim(txtUserid.Text).ToUpper
        Catch ex As Exception
            UserID = " "
        End Try

        Dim StrGRIB As String = GetUserIDENT(UserID)

        StrQuery = "SELECT DISTINCT(SUBSTR(BUSINESS_UNIT_IN, 2, 4)) As BUUNIT FROM SYSADM8.PS_DS_NETDET_TBL WHERE DS_NETWORK_CODE = (SELECT DS_NETWORK_CODE " & vbCrLf & _
        "FROM SYSADM8.PS_BUS_UNIT_TBL_OM WHERE BUSINESS_UNIT = (SELECT BUSINESS_UNIT FROM SDIX_USERS_TBL WHERE UPPER(ISA_EMPLOYEE_ID) = '" & UserID & "'))"
        Dim dtrEMPReader As OleDbDataReader = ORDBData.GetReader(StrQuery)

        ddlGrib.DataSource = dtrEMPReader
        ddlGrib.DataTextField = "BUUNIT"
        ddlGrib.DataValueField = "BUUNIT"
        ddlGrib.DataBind()
        ddlGrib.Items.Insert(0, New ListItem("-- SELECT --"))


        If Not ddlGrib.Items.FindByValue(StrGRIB) Is Nothing Then
            ddlGrib.Items.FindByValue(StrGRIB).Selected = True
        End If
        dtrEMPReader.Close()
    End Sub

    Private Function GetUserIDENT(ByVal StrUser As String) As String
        Dim UserIdent As String = String.Empty
        Dim StrQuery As String = "SELECT ISA_CRIB_IDENT FROM SDIX_USERS_TBL WHERE UPPER(ISA_EMPLOYEE_ID)='" & StrUser & "'"
        UserIdent = ORDBData.GetScalar(StrQuery)
        Return UserIdent
    End Function

    Protected Sub btnGribSubmit_Click(sender As Object, e As EventArgs)
        Dim strMessage As New Alert

        If ddlGrib.SelectedIndex = 0 Then
            ltlAlert.Text = strMessage.Say("Please select Crib")
            Exit Sub
        End If

        Dim StrGRIB As String = ddlGrib.SelectedValue

        Dim StrQury As String = "UPDATE SDIX_USERS_TBL SET LASTUPDOPRID='" & CStr(Session("USERID")).Trim.ToUpper & "' , LASTUPDDTTM = TO_DATE('" & Now().ToString() & "', 'MM/DD/YYYY HH:MI:SS AM') " & vbCrLf & _
            ", ISA_CRIB_IDENT='" & StrGRIB & "' WHERE UPPER(ISA_EMPLOYEE_ID)='" & Trim(txtUserid.Text).ToUpper & "' "

        Dim rowAffected As Integer = ORDBData.ExecNonQuery(StrQury, False)

        If rowAffected > 0 Then
            lblGRIBErr.Text = "Successfully Updated"
        Else
            lblGRIBErr.Text = "Update Failed. Error message was sent to IT Group. Please contact Help Desk."
        End If
    End Sub

#End Region

    Private Sub btnUserAccessCancel_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnUserAccessCancel.Click
        Session("V_PageAction") = ""
        Dim str As String = "Supplier/SDIVendor.aspx" '"CatalogTree.aspx?USERID=" + Session("USERID").ToString
        Response.Redirect(str, True)
    End Sub


    Private Sub rtvPrograms_NodeDataBound(ByVal sender As Object, ByVal e As Telerik.Web.UI.RadTreeNodeEventArgs) Handles rtvPrograms.NodeDataBound
        If e.Node.DataItem("active").ToString() = clsProgramMaster.InactiveProgramCode.ToString Then
            e.Node.Enabled = False
            e.Node.Checkable = False 'YA 20180629 Ticket 137359/Task 1316 disabling checkable property of inactive nodes in user priv panel to prevent unique constraint errors
        ElseIf e.Node.DataItem("securityalias").ToString.Trim.Length = 0 Then
            e.Node.Enabled = False
        ElseIf e.Node.DataItem("securityalias").ToString().ToUpper() = GetPrivilegeMoniker(UserPrivsEnum.Home) Then
            e.Node.Selected = True
            e.Node.Enabled = False
        End If
    End Sub

    Private Sub btnCollapseAll_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnCollapseAll.Click
        rtvPrograms.CollapseAllNodes()
    End Sub

    Private Sub btnExpandAll_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnExpandAll.Click
        rtvPrograms.ExpandAllNodes()
    End Sub

    Private Sub GetAlaCarteData()
        Try
            Dim strSDICust As String = ""
            Dim strUserType As String = ""
            GetDisplayedUserType(strSDICust, strUserType)

            rtvPrograms.ClearCheckedNodes()
            Dim dsUserPrivileges As DataSet = New DataSet
            'dsUserPrivileges = BuildingMenus.BuildMenu.GetDBDrivenMenu(ViewState("BU"), txtUserid.Text)  '  , strSDICust)
            dsUserPrivileges = BuildingMenus.BuildMenu.GetUserMenu(ViewState("BU"), txtUserid.Text, strSDICust)
            If Not dsUserPrivileges Is Nothing Or dsUserPrivileges.Tables(0).Rows.Count > 0 Then
                Dim nodeCollection As IList(Of RadTreeNode) = rtvPrograms.GetAllNodes()
                ' Loop through privilege tree
                For Each node As RadTreeNode In nodeCollection
                    ' Find current privilege tree program in user list of privileges
                    Dim bFound As Boolean = False
                    Dim iRowIndex As Integer = 0
                    While iRowIndex < dsUserPrivileges.Tables(0).Rows.Count And Not bFound
                        Dim name As String = ""
                        Dim dr As DataRow = dsUserPrivileges.Tables(0).Rows(iRowIndex)
                        Try
                            name = dr("securityalias")
                        Catch ex As Exception
                            Try
                                ' Use this in case the privilege was deleted at some point in the past.
                                name = dr("securityalias", DataRowVersion.Original)
                            Catch ex1 As Exception
                            End Try
                        End Try
                        If name.Length > 0 Then
                            If node.Value = name Then
                                node.Checked = True
                                bFound = True
                            End If
                        End If

                        iRowIndex = iRowIndex + 1
                    End While
                Next
            End If
        Catch ex As Exception

        End Try
    End Sub

    Private Function GetSelectDropDownData() As DataSet
        Dim strSQLSelect As String
        Dim strSQLWhere As String
        Dim strSQLOrder As String
        Dim strSQLString As String
        Dim dsORUsers As DataSet

        Try
            strSQLSelect = "SELECT ISA_USER_NAME, ISA_EMPLOYEE_ID" & vbCrLf
            strSQLSelect = strSQLSelect & ", isa_user_name || ' - ' || business_unit || ' - ' || isa_employee_id || DECODE(active_status,'I',' - INACTIVE','F',' - FAILED LOGIN',' ')  as  USERANDBU" & vbCrLf
            strSQLSelect = strSQLSelect & " FROM SDIX_users_tbl"

            If Session("USERTYPE") = "ADMIN" Or _
                Session("USERTYPE") = "ADMINX" Or _
                Session("USERTYPE") = "ADMINR" Then
                strSQLWhere = " WHERE BUSINESS_UNIT = '" & Session("BUSUNIT") & "'" & _
                        " AND ISA_SDI_EMPLOYEE = 'C'" & _
                        " AND ISA_EMPLOYEE_ACTYP <> 'ANNOU'"
            Else
                strSQLWhere = " WHERE ISA_EMPLOYEE_ACTYP <> 'ANNOU'"
            End If
            strSQLWhere = strSQLWhere & " AND NOT isa_employee_id LIKE '%<%' AND NOT isa_employee_id LIKE '%>%' AND ISA_VENDOR_ID='" & Session("VendorID_Data") & "'"

            
            If Not IsUserCanReinstate() Then
                ' If logged in user can reinstate an account, don't filter out by active_status; show all users regardless of status.
                ' If the logged in user cannot reinstate an account, just show active users and users who are locked out because of too many failed login attempts.
                'strSQLOrder = " AND ACTIVE_STATUS IN ('" & clsUserTbl.ActiveStatus_Active & "','" & clsUserTbl.ActiveStatus_FailedLogin & "')"
                strSQLOrder = " AND ACTIVE_STATUS IN ('" & clsUserTbl.ActiveStatus_Active & "','" & clsUserTbl.ActiveStatus_FailedLogin & "') AND ISA_SDI_EMPLOYEE = 'V'"

            End If
            strSQLOrder &= " ORDER BY ISA_USER_NAME"

            strSQLString = strSQLSelect & strSQLWhere & strSQLOrder

            dsORUsers = ORDBData.GetAdapter(strSQLString)
        Catch ex As Exception
            Dim esb As Integer = 1
        End Try

        Return dsORUsers
    End Function

    Private Sub ddlSDiUsers_SelectedIndexChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles ddlSDiUsers.SelectedIndexChanged
        ShowTrackData()
    End Sub

    Private Sub ShowTrackData()
        Try
            If ddlSDiUsers.SelectedValue.ToString.Trim.Length > 0 Then
                Dim oUserTbl As New clsUserTbl(ddlSDiUsers.SelectedValue, "")
                lblOtherUserIDVal.Text = ddlSDiUsers.SelectedValue

                'add user = off
                btnTangoAddOtherUser.Visible = False
                'message = off
                lblOtherUserBUMessage.Visible = False
                'Track user ID = off
                txtOtherUserTangoUserNameVal.Visible = False
                lblOtherUserTangoUserNameValStored.Visible = False
                lblOtherUserTangoUserNameValStored.Text = ""
                txtOtherUserTangoUserNameVal.Text = ""
                'password = off
                lblOtherUserTangoPassword.Visible = False
                txtOtherUserTangoPasswordVal.Visible = False
                'added date = off
                lblOtherUserAddedOn.Visible = False
                lblOtherUserAddedOnVal.Visible = False
                'GUID = off
                lblOtherUserGUID.Visible = False
                lblOtherUserGUIDVal.Visible = False
                'validation = off
                lblValidationOtherUser.Text = ""

                Dim oGroup As Object = rcbGroup.FindItemByValue(oUserTbl.BusinessUnit)
                If oGroup IsNot Nothing Then
                    lblOtherUserBUVal.Text = CType(oGroup, RadComboBoxItem).Text

                    'no BU message = off
                    lblOtherUserNoBU.Visible = False
                    lblOtherUserBUVal.Visible = True

                    Dim oEnterprise As New clsEnterprise(oUserTbl.BusinessUnit)
                    If oEnterprise.TrackDBType.Trim().Length = 0 Then
                        'message = on
                        lblOtherUserBUMessage.Visible = True
                        'Track user ID = off
                        lblOtherUserTangoUserName.Visible = False
                    Else
                        Dim oSDITrack As New clsSDITrack
                        If oUserTbl.TrackUserGUID.Trim.Length > 0 Then
                            'Track user ID = on, display
                            lblOtherUserTangoUserName.Visible = True
                            lblOtherUserTangoUserNameValStored.Text = oUserTbl.TrackUserName
                            lblOtherUserTangoUserNameValStored.Visible = True
                            'added date = on
                            lblOtherUserAddedOn.Visible = True
                            lblOtherUserAddedOnVal.Text = oUserTbl.TrackToDate
                            lblOtherUserAddedOnVal.Visible = True
                            'GUID = on
                            lblOtherUserGUID.Visible = True
                            lblOtherUserGUIDVal.Text = oUserTbl.TrackUserGUID
                            lblOtherUserGUIDVal.Visible = True
                        Else
                            'add user = on
                            btnTangoAddOtherUser.Visible = True
                            'Track user ID = on, editable
                            lblOtherUserTangoUserName.Visible = True
                            txtOtherUserTangoUserNameVal.Visible = True
                            'password = on
                            lblOtherUserTangoPassword.Visible = True
                            txtOtherUserTangoPasswordVal.Visible = True
                        End If
                    End If
                Else
                    'Track user ID = off
                    lblOtherUserTangoUserName.Visible = False
                    'no BU message = on
                    lblOtherUserNoBU.Visible = True
                    lblOtherUserBUVal.Visible = False
                End If
            End If
        Catch ex As Exception
            Dim esb As Integer = 1
        End Try
    End Sub

    Private Sub AddTangoUser(ByVal sUserID As String, ByVal sBU As String, ByVal txtUserName As TextBox, ByVal txtPassword As TextBox, ByVal lblPassword As Label, ByVal lblValidate As Label, _
                             ByVal lblUserNameStored As Label, ByVal lblDateTime As Label, ByVal lblDateTimeVal As Label, ByVal lblGUID As Label, _
                             ByVal lblGUIDVal As Label, ByVal btnAddUser As Button)
        Dim oSDITrack As New clsSDITrack()
        Dim bUserExists As Boolean = False
        Try
            Dim sNewUserGUID As String
            Dim dtTodaysDate As Date
            If oSDITrack.AddUser(sUserID, sBU, txtUserName.Text, txtPassword.Text, bUserExists, sNewUserGUID, dtTodaysDate) Then
                lblValidate.Text = "User Added to SDiTrack"
                lblUserNameStored.Text = txtUserName.Text
                lblUserNameStored.Visible = True
                txtUserName.Visible = False
                lblDateTime.Visible = True
                lblDateTimeVal.Visible = True
                lblGUID.Visible = True
                lblGUIDVal.Visible = True
                txtPassword.Visible = False
                lblPassword.Visible = False
                btnAddUser.Visible = False
            ElseIf bUserExists Then
                lblValidate.Text = "UserName Already Exists in SDiTrack"
            End If
            lblGUIDVal.Text = sNewUserGUID
            lblDateTimeVal.Text = dtTodaysDate.ToString()
        Catch ex As Exception
            If bUserExists Then
                lblValidate.Text = "UserName Already Exists in SDiTrack"
            End If
        End Try
    End Sub

    Private Sub btnTangoAddOtherUser_Click(ByVal sender As Object, ByVal e As System.EventArgs) Handles btnTangoAddOtherUser.Click
        Dim oUserTbl As New clsUserTbl(ddlSDiUsers.SelectedValue, "")
        Dim sBU As String = oUserTbl.BusinessUnit

        AddTangoUser(lblOtherUserIDVal.Text, sBU, txtOtherUserTangoUserNameVal, txtOtherUserTangoPasswordVal, _
                     lblOtherUserTangoPassword, lblValidationOtherUser, lblOtherUserTangoUserNameValStored, lblOtherUserAddedOn, _
                     lblOtherUserAddedOnVal, lblOtherUserGUID, lblOtherUserGUIDVal, btnTangoAddOtherUser)
    End Sub

    Private Sub AddNode(ByVal ePriv As UserPrivsEnum, ByVal rtv As RadTreeView, ByVal dsPrograms As DataSet)
        Dim sSecurityAlias As String = GetPrivilegeMoniker(ePriv)
        If sSecurityAlias.Length > 0 Then
            Dim newNode As New RadTreeNode
            Dim rows() As DataRow = dsPrograms.Tables(0).Select("securityalias = '" & sSecurityAlias & "'")

            If rows.Length = 1 Then
                newNode.Text = rows(0).Item("programname")
                newNode.Value = sSecurityAlias
                newNode.Checked = True
                rtv.Nodes.Add(newNode)
            End If
        End If
    End Sub

    Private Sub GetDisplayedUserType(ByRef strSDICust As String, ByRef strUserType As String)
        Try
            If lblAction.Text = "ADD" Then
                If IsVendor() Or IsMexicoVendor() Then
                    strSDICust = "V"
                Else
                    strSDICust = "C"
                End If
                strUserType = "USER"
            End If
            
            strSDICust = radioUserType.SelectedValue
            strUserType = roleDropdownList.SelectedValue

            'End If
        Catch ex As Exception

        End Try
    End Sub

    Private Function GetDisplayedUserID() As String
        Dim strUSERID As String = String.Empty
        If radioUserType.SelectedValue = "C" Then
            If UserIdSessionvalue IsNot Nothing Then
                strUSERID = UserIdSessionvalue.Trim.ToUpper
                strUSERID = Replace(strUSERID, "'", "")
            End If
        Else
            strUSERID = txtUserid.Text.Trim.ToUpper
            strUSERID = Replace(strUSERID, "'", "")
        End If
   
        Return strUSERID
    End Function

    Private Function ConvertSDICustToSDIEmp(ByVal sSDICust As String)
        Dim sSDIEmp As String
        If sSDICust = "S" Then
            sSDIEmp = "SDI"
        Else
            sSDIEmp = "CUST"
        End If
        Return sSDIEmp
    End Function

    Private Function GetPortal(ByVal sDisplayedSDICust As String) As String
        ' Default is Customer portal
        Dim sPortal As String = clsProgramMaster.PortalCustomer

        If IsVendor() Or sDisplayedSDICust = "V" Then
            sPortal = clsProgramMaster.PortalVendor
        ElseIf IsMexicoVendor() Then
            sPortal = clsProgramMaster.PortalVendor
        End If

        Return sPortal
    End Function

    Private Function IsVendor() As Boolean
        Dim bIsVendor As Boolean = False

        If Request.QueryString("VENDOR") = "YES" Then
            bIsVendor = True
        End If

        Return bIsVendor
    End Function

    Private Function IsMexicoVendor() As Boolean
        Dim bIsMexico As Boolean = False

        If Request.QueryString("MEXICO") = "YES" Then
            bIsMexico = True
        End If

        Return bIsMexico
    End Function

    Private Sub HideExpandCollapseButtons()
        Dim iNodeIndex As Integer = 0
        Dim bFoundChildren As Boolean = False

        ' Following returns top-level parents
        Dim navTreePrograms As IList(Of RadTreeNode) = rtvPrograms.GetAllNodes()

        While iNodeIndex < navTreePrograms.Count And Not bFoundChildren
            ' Loop through top-level parents to see if there's a first level of children
            Dim childNodes As IList(Of RadTreeNode) = navTreePrograms(iNodeIndex).GetAllNodes
            If childNodes.Count > 0 Then
                bFoundChildren = True
            End If
            iNodeIndex = iNodeIndex + 1
        End While

        btnExpandAll.Visible = bFoundChildren
        btnCollapseAll.Visible = bFoundChildren
    End Sub

    Private Function ExistsApprvRecord(ByVal strBU As String) As Boolean
        Dim bExistsRecord As Boolean = False
        Dim strSQLstring As String

        Try
            strSQLstring = "SELECT * FROM SDIX_USERS_APPRV WHERE ISA_EMPLOYEE_ID = '" & txtUserid.Text & _
                "' AND business_unit = '" & strBU & "'"
            Dim ds As DataSet = ORDBData.GetAdapter(strSQLstring)
            If ds.Tables(0).Rows.Count > 0 Then
                bExistsRecord = True
            End If
        Catch ex As Exception

        End Try

        Return bExistsRecord
    End Function

    Private Function IsUserCanReinstate() As Boolean
        Dim bCanReinstate As Boolean = False

        Dim user_terminate As String = ConfigurationSettings.AppSettings("Profile_inactivate_setting")
        Dim sAllowedUsers() As String = user_terminate.ToUpper.Split(",")

        Dim i As Integer = 0
        While i < sAllowedUsers.Length And Not bCanReinstate
            If Session("USERID").ToString.ToUpper = sAllowedUsers(i) Then
                bCanReinstate = True
            End If
            i = i + 1
        End While

        If Not bCanReinstate Then
            If Not Session("USERTYPE") Is Nothing And Not Session("SDIEMP") Is Nothing Then
                If Convert.ToString(Session("USERTYPE")).ToUpper().Equals("ADMIN") And Convert.ToString(Session("SDIEMP")).ToUpper().Equals("CUST") Then
                    bCanReinstate = True
                End If
            End If
        End If
        'If Session("USERID") = user_terminate Then
        '    bCanReinstate = True
        'End If

        Return bCanReinstate
    End Function

    Private Sub btnActivateAccount_Click(sender As Object, e As EventArgs) Handles btnActivateAccount.Click
        Dim strSQLstring As String

        Try
            ' Set the account active
            strSQLstring = "UPDATE SDIX_USERS_TBL " & vbCrLf & _
                " SET active_status = '" & clsUserTbl.ActiveStatus_Active & "' " & vbCrLf & _
                " , lastupdoprid = '" & Session("USERID").ToString & "' " & vbCrLf & _
                " , lastupddttm = TO_DATE('" & Now.ToString & "', 'MM/DD/YYYY HH:MI:SS AM') " & vbCrLf & _
                " WHERE isa_employee_id = '" & txtUserid.Text & "' " & vbCrLf & _
                " AND active_status = '" & lblActiveStatusHide.Text & "' " & vbCrLf & _
                " AND isa_user_id = '" & lblUserIDHide.Text & "' "
            Dim rowsaffected As Integer = ORDBData.ExecNonQuery(strSQLstring, False)
            If rowsaffected = 1 Then
                Dim strBU As String = ""
                Dim strUserGroup As String = ""
                GetSelectedBUandGroup(strBU, strUserGroup)
                ' Write an audit record saying the account was reactivated.
                clsSDIAudit.AddRecord("Profile.aspx", "Activate account", "SDIX_USERS_TBL", Session("USERID").ToString, strBU, txtUserid.Text, sColumnChg:="active_status", _
                      sOldValue:=lblActiveStatusHide.Text, sNewValue:=clsUserTbl.ActiveStatus_Active)

                lblAccountDisabled.Text = "This SDIX User account is now active."
                btnActivateAccount.Visible = False
                btnInactivateAccount.Visible = True ' After activating an account, we want to give the ability to inactivate.

                'If user went from "failed login" to active, remove the "failed login" from the user dropdown
                Dim iIndex As Integer = dropSelectUser.SelectedItem.Text.IndexOf(" - FAILED LOGIN")
                If iIndex > 0 Then
                    dropSelectUser.SelectedItem.Text = dropSelectUser.SelectedItem.Text.Substring(0, iIndex)
                Else
                    ' If user went from "inactive" to active, remove the "inactive" from the user dropdown
                    iIndex = dropSelectUser.SelectedItem.Text.IndexOf(" - INACTIVE")
                    dropSelectUser.SelectedItem.Text = dropSelectUser.SelectedItem.Text.Substring(0, iIndex)
                End If
                lblActiveStatusHide.Text = clsUserTbl.ActiveStatus_Active ' Update the hidden label indicating the active status
            Else
                lblDBError.Text = "There was an issue trying to activate this account."
                lblDBError.Visible = True
            End If
        Catch ex As Exception
        End Try
    End Sub

    Private Sub GetSelectedBUandGroup(ByRef strBU As String, ByRef strUserGroup As String)
        strBU = Me.drpBUnit.SelectedValue.ToString.Trim
        strUserGroup = m_cUserGroup_Vendor
    End Sub

    Private Sub btnInactivateAccount_Click(sender As Object, e As EventArgs) Handles btnInactivateAccount.Click
        Try
            Dim strSqlupd1 As String
            ' Inactivate the account
            strSqlupd1 = " UPDATE " & vbCrLf & _
                               " SDIX_USERS_TBL " & vbCrLf & _
                         " SET " & vbCrLf & _
                               " ACTIVE_STATUS = '" & clsUserTbl.ActiveStatus_Inactive & "'," & vbCrLf & _
                               " LASTUPDOPRID = '" & Session("USERID") & "'," & vbCrLf & _
                               " LASTUPDDTTM = TO_DATE('" & Now().ToString() & "', 'MM/DD/YYYY HH:MI:SS AM')" & vbCrLf & _
                         " WHERE " & vbCrLf & _
                               " ISA_EMPLOYEE_ID = '" & Trim(txtUserid.Text).ToUpper & "' " & vbCrLf & _
                               " AND active_status = '" & lblActiveStatusHide.Text & "' " & vbCrLf & _
                               " AND isa_user_id = '" & lblUserIDHide.Text & "' "

            Dim rowsaffected As Integer = ORDBData.ExecNonQuery(strSqlupd1, False)
            If rowsaffected = 1 Then
                Dim strBU As String = ""
                Dim strUserGroup As String = ""
                GetSelectedBUandGroup(strBU, strUserGroup)
                ' Write an audit record saying the account was reactivated.
                clsSDIAudit.AddRecord("Profile.aspx", "Inactivate account", "SDIX_USERS_TBL", Session("USERID").ToString, strBU, txtUserid.Text, sColumnChg:="active_status", _
                      sOldValue:=lblActiveStatusHide.Text, sNewValue:=clsUserTbl.ActiveStatus_Inactive)

                lblAccountDisabled.Text = "This SDIX User account is now inactive."
                btnInactivateAccount.Visible = False
                btnActivateAccount.Visible = True ' After inactivating an account, we want to give the ability to activate.

                'If user went from "failed login" to inactive, remove the "failed login" from the user dropdown and change to inactive
                Dim iIndex As Integer = dropSelectUser.SelectedItem.Text.IndexOf(" - FAILED LOGIN")
                If iIndex > 0 Then
                    dropSelectUser.SelectedItem.Text = dropSelectUser.SelectedItem.Text.Substring(0, iIndex) & " - INACTIVE"
                Else
                    dropSelectUser.SelectedItem.Text = dropSelectUser.SelectedItem.Text & " - INACTIVE"
                End If
                lblActiveStatusHide.Text = clsUserTbl.ActiveStatus_Inactive ' Update the hidden label indicating the active status
            Else
                lblDBError.Text = "There was an issue trying to inactivate this account."
                lblDBError.Visible = True
            End If

        Catch ex As Exception
        End Try
    End Sub

    Private Sub GetMultiBusinessUnit(ByVal businessUnit As String)
        Try
            Dim ds As DataSet = UnilogORDBData.SisterBusinessUnits(businessUnit)
            If ds.Tables(0).Rows.Count > 0 Then
                rcbMultiSelect.Visible = True
                rcbMultiSelect.DataSource = ds
                rcbMultiSelect.DataTextField = "DESCRIPTION"
                rcbMultiSelect.DataValueField = "BUSINESS_UNIT"
                rcbMultiSelect.DataBind()
            Else
                rcbMultiSelect.Visible = False
                Dim strScript As String = "<script language='javascript'>alert('Sister sites are not available for this selected BU:' + '" + businessUnit + "');</script>"
                ScriptManager.RegisterClientScriptBlock(Me.Page, Me.[GetType](), "PopupScript", strScript, False)
                MultiSiteChk.Checked = False
            End If
        Catch ex As Exception

        End Try
    End Sub

    Private Sub SelectBaseBU(ByVal BaseBU As String)
        Try
            For Each checkedItem As RadComboBoxItem In rcbMultiSelect.Items
                If checkedItem.Value = BaseBU Then
                    checkedItem.Checked = True
                    checkedItem.Enabled = False
                    Exit For
                Else
                    checkedItem.Enabled = True
                End If
            Next
        Catch ex As Exception

        End Try
    End Sub

    Protected Sub MultiSiteChk_CheckedChanged(sender As Object, e As EventArgs)
        Try
            If MultiSiteChk.Checked Then
                If Request.QueryString("MEXICO") = "YES" Then
                    drpBUnit.Visible = False
                    lblBusUnit.Visible = False
                    Dim BU As String = dropSelectUser.SelectedItem.Text.Split("-")(1).Trim()
                    GetMultiBusinessUnit(BU)
                    SelectBaseBU(BU)
                Else
                    GetMultiBusinessUnit(rcbGroup.SelectedValue)
                    SelectBaseBU(rcbGroup.SelectedValue)
                End If

            Else
                If Request.QueryString("MEXICO") = "YES" Then
                    rcbMultiSelect.Visible = False
                    rcbMultiSelect.ClearCheckedItems()
                Else
                    'rcbGroup.Visible = True
                    'valGroup.Visible = True
                    rcbMultiSelect.Visible = False
                    rcbMultiSelect.ClearCheckedItems()

                End If

            End If


        Catch ex As Exception

        End Try
    End Sub

    Protected Sub btnZuseSubmit_Click(sender As Object, e As EventArgs)

        Dim rowAffected As Integer
        Dim UserName(1) As String
        lblZuseError.Text = ""
        UserName = Session("USERNAME").ToString().Split(",")
        Try
            If cbxZeus.Checked Then
                cbxZeus.Checked = False
                If lblZeus.Text = "Disable Zeus" Then
                    Dim StrQury As String = "DELETE FROM SDIX_QLIK_USERS WHERE USERID= '" & Trim(txtUserid.Text).ToUpper & "'"
                    rowAffected = ORDBData.ExecNonQuery(StrQury, False)
                    lblZeus.Text = "Enable Zeus"
                Else
                    Dim StrQury As String = "INSERT INTO SDIX_QLIK_USERS VALUES ('" & Trim(txtUserid.Text).ToUpper & "','" & UserName(1).ToString & " " & UserName(0).ToString & "')"
                    rowAffected = ORDBData.ExecNonQuery(StrQury, False)
                    lblZeus.Text = "Disable Zeus"
                End If

                If rowAffected > 0 Then
                    lblZuseError.Text = "Successfully Updated"
                    lblZuseError.ForeColor = Green
                Else
                    lblZuseError.Text = "Update Failed"
                    lblZuseError.ForeColor = Red
                End If

            Else
                lblZuseError.Text = "Please Select the Option"
                lblZuseError.ForeColor = Red
            End If

        Catch ex As Exception

        End Try
    End Sub

    Private Function LoadZuesValues()
        Dim Name As String = ""
        lblZuseError.Text = ""
        cbxZeus.Checked = False
        Try
            Dim StrQury As String = "SELECT * FROM SDIX_QLIK_USERS WHERE USERID= '" & Trim(txtUserid.Text).ToUpper & "'"
            Name = ORDBData.GetScalar(StrQury)
            If Not Name = "" Then
                lblZeus.Text = "Disable Zeus"
                cbxZeus.ToolTip = "Disable Zeus"
            Else
                lblZeus.Text = "Enable Zeus"
                cbxZeus.ToolTip = "Enable Zeus"
            End If
        Catch ex As Exception

        End Try
    End Function

    Private Sub btnEmplActivateAccount_Click(sender As Object, e As EventArgs) Handles btnEmplActivateAccount.Click
        Dim strSQLstring As String = ""
        Dim iRowsAffected As Integer = 0
        Dim strUserId As String = ""
        Dim strCurrBU As String = ""

        ' Update Employee table based on User Id and Business Unit selected
        Try
            strCurrBU = lblCurrBUHide.Text
            If Trim(strCurrBU) = "" Or Trim(strCurrBU) = "0" Then
                'error
                lblDBError.Text = "There was an issue trying to activate this Employee account."
                lblDBError.Visible = True
                Exit Sub
            End If
            strUserId = dropSelectUser.SelectedValue
            If Trim(strUserId) = "" Then
                'error
                lblDBError.Text = "There was an issue trying to activate this Employee account."
                lblDBError.Visible = True
                Exit Sub
            End If
            'update code
            strSQLstring = "UPDATE PS_ISA_EMPL_TBL " & vbCrLf & _
                " SET EFF_STATUS = '" & clsUserTbl.EmplActiveStatus_Active & "' " & vbCrLf & _
                " WHERE ISA_EMPLOYEE_ID = '" & strUserId & "' AND BUSINESS_UNIT = '" & strCurrBU & "' " & vbCrLf & _
                " AND EFF_STATUS = '" & lblEmplActiveStatusHide.Text & "' "

            iRowsAffected = ORDBData.ExecNonQuery(strSQLstring, False)
            If iRowsAffected = 1 Then
                btnEmplActivateAccount.Visible = False
                btnEmplInactivateAccount.Visible = True
                lblEmplAccountDisabled.Text = "This Employee account is now active."
                lblEmplAccountDisabled.Visible = True
                'create audit record
                clsSDIAudit.AddRecord("Profile.aspx", "Activate Employee", "SDIX_USERS_TBL", Session("USERID").ToString, strCurrBU, strUserId, sColumnChg:="EFF_STATUS", _
                      sOldValue:=clsUserTbl.EmplActiveStatus_Inactive, sNewValue:=clsUserTbl.EmplActiveStatus_Active)

                lblEmplActiveStatusHide.Text = clsUserTbl.EmplActiveStatus_Active
            Else
                'error updating
                lblDBError.Text = "There was an issue trying to activate this Employee account."
                lblDBError.Visible = True
                Exit Sub
            End If
        Catch ex As Exception
            lblDBError.Text = "There was an issue trying to activate this Employee account."
            lblDBError.Visible = True
            ' send error email
        End Try
    End Sub

    Private Sub btnEmplInactivateAccount_Click(sender As Object, e As EventArgs) Handles btnEmplInactivateAccount.Click
        Dim strSQLstring As String = ""
        Dim iRowsAffected As Integer = 0
        Dim strUserId As String = ""
        Dim strCurrBU As String = ""

        ' Update Employee table based on User Id and Business Unit selected
        Try
            strCurrBU = lblCurrBUHide.Text
            If Trim(strCurrBU) = "" Or Trim(strCurrBU) = "0" Then
                'error
                lblDBError.Text = "There was an issue trying to inactivate this Employee account."
                lblDBError.Visible = True
                Exit Sub
            End If
            strUserId = dropSelectUser.SelectedValue
            If Trim(strUserId) = "" Then
                'error
                lblDBError.Text = "There was an issue trying to inactivate this Employee account."
                lblDBError.Visible = True
                Exit Sub
            End If
            'update code
            strSQLstring = "UPDATE PS_ISA_EMPL_TBL " & vbCrLf & _
                " SET EFF_STATUS = '" & clsUserTbl.EmplActiveStatus_Inactive & "' " & vbCrLf & _
                " WHERE ISA_EMPLOYEE_ID = '" & strUserId & "' AND BUSINESS_UNIT = '" & strCurrBU & "' " & vbCrLf & _
                " AND EFF_STATUS = '" & lblEmplActiveStatusHide.Text & "' "

            iRowsAffected = ORDBData.ExecNonQuery(strSQLstring, False)
            If iRowsAffected = 1 Then
                btnEmplActivateAccount.Visible = True
                btnEmplInactivateAccount.Visible = False
                lblEmplAccountDisabled.Text = "This Employee account is now NOT active."
                lblEmplAccountDisabled.Visible = True
                'create audit record
                clsSDIAudit.AddRecord("Profile.aspx", "Inactivate Employee", "PS_ISA_EMPL_TBL", Session("USERID").ToString, strCurrBU, strUserId, sColumnChg:="EFF_STATUS", _
                      sOldValue:=clsUserTbl.EmplActiveStatus_Active, sNewValue:=clsUserTbl.EmplActiveStatus_Inactive)

                lblEmplActiveStatusHide.Text = clsUserTbl.EmplActiveStatus_Inactive
            Else
                'error updating
                lblDBError.Text = "There was an issue trying to inactivate this Employee account."
                lblDBError.Visible = True
                Exit Sub
            End If
        Catch ex As Exception
            lblDBError.Text = "There was an issue trying to inactivate this Employee account."
            lblDBError.Visible = True
            ' send error email
            Dim strSubject As String = "Error in Profile.aspx"
        End Try
    End Sub

    Protected Sub radioUserType_SelectedIndexChanged(sender As Object, e As EventArgs)
        If Trim(Page_Action) = "ADD" Then
            If radioUserType.SelectedValue = "V" Then
                Session("CurrentValueOfUserTypeField") = radioUserType.SelectedValue
                Response.Redirect("profile.aspx?type=ADD&VENDOR=" & "YES&CUSTOMER=" & "NO")
            ElseIf radioUserType.SelectedValue = "C" Then
                Session("CurrentValueOfUserTypeField") = radioUserType.SelectedValue
                Response.Redirect("profile.aspx?type=ADD&VENDOR=" & "NO&CUSTOMER=" & "YES")
            Else
                Session("CurrentValueOfUserTypeField") = radioUserType.SelectedValue
                Response.Redirect("profile.aspx?type=ADD&VENDOR=" & "NO&CUSTOMER=" & "NO")
            End If

            'Response.Redirect("profile.aspx?type=ADD&VENDOR=" & lblVendor.Text)
            'Else
            '    'Response.Redirect("profile.aspx?type=ADD&MEXICO=" & lblVendor.Text)
        End If
    End Sub

    Private Sub GetUserValues()
        Dim SDIUserId As String = Session("USERID")
        Dim SQLSTRINGQuery As String = "Select * from SDIX_USERS_TBL where ISA_EMPLOYEE_ID = '" & SDIUserId & "'"

        Dim dsOREmp As DataSet = ORDBData.GetAdapter(SQLSTRINGQuery)

        If dsOREmp.Tables(0).Rows.Count() > 0 Then
            Session("V_ROLE_Type") = dsOREmp.Tables(0).Rows(0).Item("ISA_EMPLOYEE_ACTYP")
            Session("V_USERTYPEVALUE") = dsOREmp.Tables(0).Rows(0).Item("ISA_SDI_EMPLOYEE")
            Session("VendorID_Data") = dsOREmp.Tables(0).Rows(0).Item("ISA_VENDOR_ID")
        End If
    End Sub

    Private Function UpdateUserIDSeqTBL(ByVal Inc_value As Integer)
        Dim strUserIdQuery As String = "Select USERID_SEQ from ISA_USERID_SEQ order by USERID_SEQ desc"
        Dim ds_PreviousUserIDSeq As DataSet = ORDBData.GetAdapter(strUserIdQuery)
        Dim strPreviousUserIDSeq As Integer = Convert.ToInt32(ds_PreviousUserIDSeq.Tables(0).Rows(0).Item("USERID_SEQ"))
        Dim UpdateQuery_UserIdSeq As String
        If Inc_value = 0 Then
            UpdateQuery_UserIdSeq = "Update ISA_USERID_SEQ set USERID_SEQ = " & strPreviousUserIDSeq + 1 & " where USERID_SEQ = " & strPreviousUserIDSeq & ""
        Else
            UpdateQuery_UserIdSeq = "Update ISA_USERID_SEQ set USERID_SEQ = " & strPreviousUserIDSeq + Inc_value & " where USERID_SEQ = " & strPreviousUserIDSeq & ""
        End If

        Dim ds_UpdatedUserIDSeq As DataSet = ORDBData.GetAdapter(UpdateQuery_UserIdSeq)
    End Function

End Class